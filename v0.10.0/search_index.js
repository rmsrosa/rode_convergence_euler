var documenterSearchIndex = {"docs":
[{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/04-allnoises.jl\"","category":"page"},{"location":"examples/04-allnoises/#Linear-system-with-all-implemented-noises","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"","category":"section"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"This time we consider a linear system of equations with a vector-valued noise composed of all the implemented noises.","category":"page"},{"location":"examples/04-allnoises/#The-equation","page":"Linear system with all implemented noises","title":"The equation","text":"","category":"section"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"More precisely, we consider the RODE","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"  begincases\n    displaystyle fracmathrmdmathbfX_tmathrmd t = - mathbfY_t^2 mathbfX_t + mathbfY_t qquad 0 leq t leq T \n  left mathbfX_t right_t = 0 = mathbfX_0\n  endcases","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"where mathbfY_t_tgeq 0 is a vector-valued noise with each component being each of the implemented noises.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Again, the target solution is construced by solving the system via Euler method at a much higher resolution.","category":"page"},{"location":"examples/04-allnoises/#Numerical-approximation","page":"Linear system with all implemented noises","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/04-allnoises/#Setting-up-the-problem","page":"Linear system with all implemented noises","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"First we load the necessary packages","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"using Plots\nusing LinearAlgebra\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Then we set up some variables, as in the first example. First, the RNG:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Next the right hand side of the system of equations, in the in-place version, for the sake of performance. Here, the vector variable dx is updated with the right hand side of the system of equations. The norm squared of the noise y at a given time t is computed via sum(abs2, y).","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"f!(dx, t, x, y) = (dx .= .- sum(abs2, y) .* x .+ y)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The time interval is given by the end points","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"t0, tf = 0.0, 1.0","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"and the mesh parameters are set to","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"ntgt = 2^18\nns = 2 .^ (6:9)\nnsample = ns[[1, 2, 3]]","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The number of simulations for the Monte Carlo estimate is set to","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"m = 80","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Now we define all the noise parameters","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"y0 = 0.2\n\nν = 0.3\nσ = 0.5\n\nμ = 0.3\n\nμ1 = 0.5\nμ2 = 0.3\nω = 3π\nprimitive_a = t -> μ1 * t - μ2 * cos(ω * t) / ω\nprimitive_b2 = t -> σ^2 * ( t/2 - sin(ω * t) * cos(ω * t) / 2ω )\n\nλ = 5.0\ndylaw = Exponential(0.5)\n\nsteplaw = Uniform(0.0, 1.0)\n\nλ₀ = 3.0\na = 2.0\nδ = 3.0\n\nnr = 6\ntransport(t, r) = mapreduce(ri -> cbrt(sin(ri * t)), +, r) / length(r)\nylaw = Gamma(7.5, 2.0)\n\nhurst = 0.6","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The noise is, then, defined as a (vectorial) ProductProcess, where each coordinate is one of the implemented noise types:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"noise = ProductProcess(\n    WienerProcess(t0, tf, 0.0),\n    OrnsteinUhlenbeckProcess(t0, tf, y0, ν, σ),\n    GeometricBrownianMotionProcess(t0, tf, y0, μ, σ),\n    HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_b2),\n    CompoundPoissonProcess(t0, tf, λ, dylaw),\n    PoissonStepProcess(t0, tf, λ, steplaw),\n    ExponentialHawkesProcess(t0, tf, λ₀, a, δ, dylaw),\n    TransportProcess(t0, tf, ylaw, transport, nr),\n    FractionalBrownianMotionProcess(t0, tf, y0, hurst, ntgt)\n)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Both the Wiener and the Orsntein-Uhlenbeck processes are additive noises so the strong order 1 convergence for them is not a surprise based on previous work.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"All the other noises, however, would be thought to have a lower order of convergence but our results prove they are still of order 1. Hence, their combination is also expected to be of order 1, as illustrated here.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Notice we chose the hurst parameter of the fractional Brownian motion process to be between 1/2 and 1, so that the strong convergence is also of order 1, just like for the other types of noises in noise. Previous knowledge would expect a strong convergence of order H, with 12  H  1 instead.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The geometric Brownian motion process, say G_t_t is a multiplicative noise, but since its solution is given explicitly in the form G_t = g(t W_t) for a Wiener process W_t_t, then the Euler method for the associated RODE coincides with the Euler method for an associated RODE with additive noise W_t_t However, the corresponding nonlinear term does not have global Lipschitz bound, so the strong order 1 does not follow from that. Our results, however, apply without further assumptions.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Finally, the homogeneous linear Itô process is a multiplicative noise whose state at time t cannot be written explicitly as a function of t and W_t It requires the previous history W_s of the associated Wiener process, for 0leq s leq t hence it would genuinely be expected to be of strong order less than 1/2, which is not the case as we show here, proving it to also be of order 1.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Now we set up the initial condition, taking into account the number of equations in the system, which is determined by the dimension of the vector-valued noise.","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"x0law = MvNormal(zeros(length(noise)), I)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"We finally add some information about the simulation:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"info = (\n    equation = \"\\$\\\\mathrm{d}\\\\mathbf{X}_t/\\\\mathrm{d}t = - \\\\| \\\\mathbf{Y}_t\\\\|^2 \\\\mathbf{X}_t + \\\\mathbf{Y}_t\\$\",\n    noise = \"vector-valued noise \\$\\\\{\\\\mathbf{Y}_t\\\\}_t\\$ with all the implemented noises\",\n    ic = \"\\$\\\\mathbf{X}_0 \\\\sim \\\\mathcal{N}(\\\\mathbf{0}, \\\\mathrm{I})\\$\"\n)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The method for which want to estimate the rate of convergence is, naturally, the Euler method, which is also used to compute the target solution, at the finest mesh:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"target = RandomEuler(length(noise))\nmethod = RandomEuler(length(noise))","category":"page"},{"location":"examples/04-allnoises/#Order-of-convergence","page":"Linear system with all implemented noises","title":"Order of convergence","text":"","category":"section"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"suite = ConvergenceSuite(t0, tf, x0law, f!, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/#Plots","page":"Linear system with all implemented noises","title":"Plots","text":"","category":"section"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"We illustrate the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"plt_result = plot(result)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"savefig(plt_result, joinpath(@__DIR__() * \"../../../../latex/img/\", \"order_allnoises.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"For the sake of illustration, we plot a sample of the norms of a sequence of approximations of a target solution, along with the norm of the target:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"plts = [plot(suite, ns=nsample, xshow=i, resolution=2^4, title=\"Coordinate $i\", titlefont=8) for i in axes(suite.xt, 2)]\n\nplot(plts..., legend=false)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"We can also visualize the noises associated with this sample solution, both individually, as they enter the non-homogenous term,","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"plt_noises = plot(suite, xshow=false, yshow=true, linecolor=:auto, label=[\"Wiener\" \"OU\" \"gBm\" \"hlp\" \"cP\" \"sP\" \"Hawkes\" \"Transport\" \"fBm\"])","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"savefig(plt_noises, joinpath(@__DIR__() * \"../../../../latex/img/\", \"noisepath_allnoises.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"and combined, with their sum squared, as it enters the homogenous term,","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"plot(suite, xshow=false, yshow= y -> sum(abs2, y), label=\"\\$\\\\left\\\\|\\\\left\\\\|\\\\mathbf{Y}_t\\\\right\\\\|\\\\right\\\\|^2\\$\")","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"We finally combine all the convergence plot and the noises into a single plot, for the article:","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"plt_combined = plot(plt_result, plt_noises, size=(720, 240), title=[\"(a)\" \"(b)\"], titlefont=10)","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"savefig(plt_combined, joinpath(@__DIR__() * \"../../../../latex/img/\", \"allnoises_combined.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"","category":"page"},{"location":"examples/04-allnoises/","page":"Linear system with all implemented noises","title":"Linear system with all implemented noises","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/10-risk.jl\"","category":"page"},{"location":"examples/10-risk/#An-actuarial-risk-model","page":"An actuarial risk model","title":"An actuarial risk model","text":"","category":"section"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"A classical model for the surplus U_t at time t of an insurance company is the Cramér–Lundberg model (see e.g. Gerber & Shiu (1998)) given by","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  U_t = U_0 + gamma t - sum_i=1^N_t C_i","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"where U_0 is the initial capital, gamma is a constant premium rate received from the insurees, C_i is a random variable representing the value of the i-th claim paid to a given insuree, and N_t is the number of claims up to time t. The process N_t_t is modeled as a Poisson counter, so that the accumulated claims form a compound Poisson process. It is also common to use inhomogeneous Poisson processes and Hawkes self-exciting process, or combinations of such processes for the incidence of the claim, but the classical model uses a homogeneous Poisson counter.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The model above, however, does not take into account the variability of the premium rate received by the company, nor the investiment of the accumulated reserves, among other things. Several diffusion type models have been proposed to account for these and other factors. We will consider a simple model, with a randomly perturbed premium and with variable rentability.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"More precisely, we start by rewriting the above expression as the following jump (or impulse) differential equation","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdU_t = gammamathrmdt - mathrmdC_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"where","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  C_t = sum_i=1^N_t C_i","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The addition of an interest rate r leads to","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdU_t = r U_t mathrmdt + gammamathrmdt - mathrmdC_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"Assuming a premium rate perturbed by a white noise and assuming the interest rate as a process R_t_t, we find","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdU_t = R_t U_tmathrmdt + gammamathrmdt + varepsilonmathrmdW_t - mathrmdC_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"so the equation becomes","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdU_t = (gamma + R_t U_t)mathrmdt + varepsilonmathrmdW_t - mathrmdC_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"Since we can compute exactly the accumulated claims C_t, we subtract it from U_t to get rid of the jump term. We also subtract an Ornstein-Uhlenbeck process, in the classical way to transform an SDE into a RODE. So, defining","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  X_t = U_t - C_t - O_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"where O_t_t is given by","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdO_t = -nu O_tmathrmdt + varepsilonmathrmdW_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"we obtain","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdX_t = (gamma + R_t U_t)mathrmdt + nu O_tmathrmdt = (gamma + R_t (X_t + C_t + O_t))mathrmdt + nu O_tmathrmdt","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"This leads us to the linear random ordinary differential equation","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  fracmathrmdX_tmathrmdt = R_t X_t + R_t (C_t + O_t) + nu O_t + gamma","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"This equation has the explicit solution","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  X_t = X_0 e^int_0^t R_smathrmds + int_0^t e^int_s^t R_taumathrmdtau (R_s (C_s + O_s) + nu O_s + gamma)mathrmds","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"As for the interest rate process R_t_t, there is a vast literature with models for it, see e.g. Chapter 3 of Brigo & Mercurio (2006), in particular Table 3.1. Here, we consider the Dothan model (Section 3.2.2 of the aforementioned reference), which consists simply of a geometric Brownian motion process","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  mathrmdR_t = mu R_t mathrmdt + sigma R_tmathrmdt","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"with R_t = r_0, where mu sigma r_0 are positive constants. This has an explicit solution","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  R_t = r_0 e^(mu - sigma^22)t + sigma W_t","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"so that the above equation for X_t_t is a genuine random ODE.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"Once the solution of X_t_t is obtained, we find an explicit formula for the surplus X_t = U_t - C_t - O_t, namely","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"  U_t = C_t + O_t + X_0 e^int_0^t R_smathrmds + int_0^t e^int_s^t R_taumathrmdtau (R_s (C_s + O_s) + nu O_s + gamma)mathrmds","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"with R_t_t as above.","category":"page"},{"location":"examples/10-risk/#Numerical-simulations","page":"An actuarial risk model","title":"Numerical simulations","text":"","category":"section"},{"location":"examples/10-risk/#Setting-up-the-problem","page":"An actuarial risk model","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"First we load the necessary packages:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"using Plots\nusing Random\nusing LinearAlgebra\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"Then we define the random seed:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The evolution law:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"function f(t, x, y)\n    o = y[1]\n    r = y[2]\n    c = y[3]\n    ν = 5.0\n    γ = 1.0\n    dx = r * (x + c + o) + ν * o + γ\n    return dx\nend","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The time interval:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"t0, tf = 0.0, 3.0","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The law for the initial condition:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"x0 = 1.0\nx0law = Dirac(x0)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The Ornstein-Uhlenbeck, geometric Brownian motion, and compound Poisson processes for the noise term:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"O0 = 0.0\nOν = 5.0\nOε = 0.8\nR0 = 0.2\nRμ = 0.02\nRσ = 0.4\nCmax = 0.2\nCλ = 8.0\nClaw = Uniform(0.0, Cmax)\nnoise = ProductProcess(\n    OrnsteinUhlenbeckProcess(t0, tf, O0, Oν, Oε),\n    GeometricBrownianMotionProcess(t0, tf, R0, Rμ, Rσ),\n    CompoundPoissonProcess(t0, tf, Cλ, Claw)\n)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The resolutions for the target and approximating solutions, as well as the number of simulations for the Monte-Carlo estimate of the strong error:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"ntgt = 2^18\nns = 2 .^ (6:9)\nnsample = ns[[1, 2, 3, 4]]\nm = 400","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"And add some information about the simulation:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"info = (\n    equation = \"a risk model\",\n    noise = \"coupled Ornstein-Uhlenbeck, geometric Brownian motion, and compound Poisson processes\",\n    ic = \"\\$X_0 = $x0\\$\"\n)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"target = RandomEuler()\nmethod = RandomEuler()","category":"page"},{"location":"examples/10-risk/#Order-of-convergence","page":"An actuarial risk model","title":"Order of convergence","text":"","category":"section"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/10-risk/#Plots","page":"An actuarial risk model","title":"Plots","text":"","category":"section"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"We plot the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"plt_result = plot(result)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"savefig(plt_result, joinpath(@__DIR__() * \"../../../../latex/img/\", \"convergence_riskmodel.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"For the sake of illustration of the behavior of the system, we visualize a sample solution","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"plt_sols = plot(suite, ns=nothing, label=\"\\$X_t\\$\", linecolor=1)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"savefig(plt_sols, joinpath(@__DIR__() * \"../../../../latex/img/\", \"evolution_riskmodel.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"We also illustrate the convergence to a sample solution","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"plt_suite = plot(suite)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"savefig(plt_suite, joinpath(@__DIR__() * \"../../../../latex/img/\", \"approximation_riskmodel.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"We can also visualize the noises associated with this sample solution:","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"plt_noises = plot(suite, xshow=false, yshow=true, label=[\"\\$O_t\\$\" \"\\$R_t\\$\" \"\\$C_t\\$\"], linecolor=[1 2 3])","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"savefig(plt_noises, joinpath(@__DIR__() * \"../../../../latex/img/\", \"riskmodel_noises.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"The actual surplus is U_t = X_t - O_t - C_t, so we may visualize a sample solution of the surplus by subtracting these two noises from the solution of the above RODE.","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"plt_surplus = plot(range(t0, tf, length=ntgt), suite.xt .- suite.yt[:, 1] .- suite.yt[:, 3], xaxis=\"\\$t\\$\", yaxis=\"\\$u\\$\", label=\"\\$U_t\\$\", linecolor=1)","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"savefig(plt_surplus, joinpath(@__DIR__() * \"../../../../latex/img/\", \"riskmodel_surplus.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"","category":"page"},{"location":"examples/10-risk/","page":"An actuarial risk model","title":"An actuarial risk model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"noises/fBm/#Simulating-fractional-Brownian-motion","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"We've implemented the Davies-Harte method for simulating exact sample paths of a fractional Brownian motion B_H(t)_0leq t leq T with Hurst parameter 0  H  1. There are a number of methods to simulate exact sample paths, such as the Cholesky method, which is of order O(N^3), and the Hosking method, which is O(N^2). These are too expensive for our needs, since we plan to build lots of sample paths with a million points. So we chose to implement the Davies-Harte method, which uses fast fourier transform (FFTs) to achieve O(Nlog N). For that, we rely on FFTW.jl, which has the julia bindings to the FFTW library.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"The point in this section is to illustrate the use of the implemented method and to do some simple sanity checks to make sure our implementation is correct.","category":"page"},{"location":"noises/fBm/#Loading-the-packages","page":"Simulating fractional Brownian motion","title":"Loading the packages","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"We start by loading the necessary packages:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"using Random\nusing Distributions\nusing Statistics\nusing BenchmarkTools\nusing FFTW\nusing LinearAlgebra\nusing Plots\nusing RODEConvergence","category":"page"},{"location":"noises/fBm/#Setup","page":"Simulating fractional Brownian motion","title":"Setup","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"We fix the initial condition y0 and the initial and final times t0 and tf of the time interval of the desired fractional Brownian motion process. We also fix the size N of the sample paths. The sample paths will be generated for a set of n times uniformly distributed within the time interval from t0 to tf, which yields a time mesh which we define as tt:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"y0 = 0.0\nt0 = 0.0\ntf = 2.0\nn = 2^9\ntt = range(t0, tf, length=n)\nnothing # hide","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"We also choose a few values of the Hurst parameter for the tests, one within 0  H  12, one exactly H = 12 corresponding to the standard Brownian motion process, and one within 12  H  1","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Hs = (0.2, 0.5, 0.8)\nnothing # hide","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"With this setup, we create the corresponding fractional Brownian motion processes:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"noise = Dict(H => FractionalBrownianMotionProcess(t0, tf, y0, H, n) for H in Hs)\nnothing # hide","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"This noise is a Dict with the keys being the chosen Hurst parameters and with each noise[H] being a fractional Brownian noise sampler with the corresponding H in Hs. With each sampler, we draw a sample path with rand!(rng, noise[H], Yt), with a random number generator rng and a vector of floats Yt of size N, so that this sampling fills up the pre-allocated vector Yt with a sample path. For that, we set up the rng, used for reproducibility, and create the vector Yt.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"rng = Xoshiro(123)\nyt = Vector{Float64}(undef, n)\nnothing # hide","category":"page"},{"location":"noises/fBm/#Plotting-some-sample-paths","page":"Simulating fractional Brownian motion","title":"Plotting some sample paths","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Here we generate and plot a few sample paths with the different Hurst parameters.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"First with a Hurst parameter within the range 12  H  1.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[3]\n\nplt = plot(title=\"Sample paths of fractional Brownian motion of length $n with Hurst parameter H=$H\", titlefont=8, xlabel=\"t\", ylabel=\"W\", legend=nothing, size=(800, 400))\nfor _ in 1:3\n    rand!(rng, noise[H], yt)\n    plot!(plt, tt, yt)\nend\nplt","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Now with H=12, which yields a standard Brownian motion.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[2]\n\nplt = plot(title=\"Sample paths of fractional Brownian motion of length $n with Hurst parameter H=$H\", titlefont=8, xlabel=\"t\", ylabel=\"W\", legend=nothing, size=(800, 400))\nfor _ in 1:3\n    rand!(rng, noise[H], yt)\n    plot!(plt, tt, yt)\nend\nplt","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Finally a rougher path with 0  H  12.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[1]\n\nplt = plot(title=\"Sample paths of fractional Brownian motion of length $n with Hurst parameter H=$H\", titlefont=8, xlabel=\"t\", ylabel=\"W\", legend=nothing, size=(800, 400))\nfor _ in 1:3\n    rand!(rng, noise[H], yt)\n    plot!(plt, tt, yt)\nend\nplt","category":"page"},{"location":"noises/fBm/#Checking-some-basic-statistics","page":"Simulating fractional Brownian motion","title":"Checking some basic statistics","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Now we simulate a bunch of sample paths and check their statistics. We start by defining how much is \"a bunch\":","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"m = 200\nnothing # hide","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Now we generate the sets of sample paths for each Hurst parameter.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"W = Dict(H => Matrix{Float64}(undef, n, m) for H in Hs)\nfor H in Hs\n    for i in 1:m\n        rand!(rng, noise[H], view(W[H], :, i))\n    end\nend\n\nmeans = Dict(H => mean(W[H], dims=2) for H in Hs)\nstds = Dict(H => std(W[H], dims=2) for H in Hs)\nnothing # hide","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[3]\n\nplt = plot(title=\"Sample paths, mean, and std\")\nplot!(plt, tt, view(W[H], :, 1:100), alpha=0.05, color=1, label=nothing)\nplot!(plt, tt, means[H], label=\"Mean\")\nplot!(plt, tt, means[H] .+ stds[H], label=\"Stds\", color=7)\nplot!(plt, tt, means[H] .- stds[H], label=nothing, color=7)\nplot!(plt, tt, tt.^H, label=\"theoretical\", color=:black, style=:dash)\nplot!(plt, tt, -tt.^H, label=nothing, color=:black, style=:dash)","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Now with H=12.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[2]\n\nplt = plot(title=\"Sample paths, mean, and std\")\nplot!(plt, tt, view(W[H], :, 1:100), alpha=0.05, color=1, label=nothing)\nplot!(plt, tt, means[H], label=\"Mean\")\nplot!(plt, tt, means[H] .+ stds[H], label=\"Stds\", color=7)\nplot!(plt, tt, means[H] .- stds[H], label=nothing, color=7)\nplot!(plt, tt, tt.^H, label=\"theoretical\", color=:black, style=:dash)\nplot!(plt, tt, -tt.^H, label=nothing, color=:black, style=:dash)","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Finally with 0  H  12.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[1]\n\nplt = plot(title=\"Sample paths, mean, and std\")\nplot!(plt, tt, view(W[H], :, 1:100), alpha=0.05, color=1, label=nothing)\nplot!(plt, tt, means[H], label=\"Mean\")\nplot!(plt, tt, means[H] .+ stds[H], label=\"Stds\", color=7)\nplot!(plt, tt, means[H] .- stds[H], label=nothing, color=7)\nplot!(plt, tt, tt.^H, label=\"theoretical\", color=:black, style=:dash)\nplot!(plt, tt, -tt.^H, label=nothing, color=:black, style=:dash)","category":"page"},{"location":"noises/fBm/#Checking-the-probability-distribution-function","page":"Simulating fractional Brownian motion","title":"Checking the probability distribution function","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"At each time t, the distribution of B_H(t) is a Normal distribution with mean 0 and standard deviation t^H. So we check this by plotting the normalized histogram of the simulated paths, along with the theoretical distribution, for a few instants of time.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[1]\nxx = -3*last(tt)^H:0.01:3*last(tt)^H\nplts = []\nfor ni in div.(n, (100, 10, 2, 1))\n    plt = plot(title=\"Histogram and PDF for H=$H at t=$(round(tt[ni], sigdigits=3))\", xlims=(first(xx), last(xx)), titlefont=8, legend=nothing)\n    histogram!(plt, view(W[H], ni, :), bins=40, normalize=true)\n    plot!(plt, xx, x -> pdf(Normal(0.0, tt[ni]^H), x))\n    push!(plts, plt)\nend\nplot(plts...)","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[2]\nxx = -3*last(tt)^H:0.01:3*last(tt)^H\nplts = []\nfor ni in div.(n, (100, 10, 2, 1))\n    plt = plot(title=\"Histogram and PDF for H=$H at t=$(round(tt[ni], sigdigits=3))\", xlims=(first(xx), last(xx)), titlefont=8, legend=nothing)\n    histogram!(plt, view(W[H], ni, :), bins=40, normalize=true)\n    plot!(plt, xx, x -> pdf(Normal(0.0, tt[ni]^H), x))\n    push!(plts, plt)\nend\nplot(plts...)","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[3]\nxx = -3*last(tt)^H:0.01:3*last(tt)^H\nplts = []\nfor ni in div.(n, (100, 10, 2, 1))\n    plt = plot(title=\"Histogram and PDF for H=$H at t=$(round(tt[ni], sigdigits=3))\", xlims=(first(xx), last(xx)), titlefont=8, legend=nothing)\n    histogram!(plt, view(W[H], ni, :), bins=40, normalize=true)\n    plot!(plt, xx, x -> pdf(Normal(0.0, tt[ni]^H), x))\n    push!(plts, plt)\nend\nplot(plts...)","category":"page"},{"location":"noises/fBm/#Checking-the-covariance","page":"Simulating fractional Brownian motion","title":"Checking the covariance","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"In theory, the covariance of a fractional Brownian motion B_H(t)_t with Hurst parameter H should be given by","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"    rho(t s) = mathbbEB_H(t)B_H(s) = frac12left t^2H + s^2H - t - s^2Hright","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"So, we compute the covariance from the generated sample paths and check the relative difference from the expected exact covariance:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[1]\ncovmatW = cov(W[H], dims=2, corrected=false)\ncovmat = [0.5*(t^(2H) + s^(2H) - abs(t - s)^(2H)) for t in tt, s in tt]\nextrema(covmatW .- covmat)","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Let us visualize the covariance of the sample paths:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"heatmap(tt, tt, covmatW, title=\"Covariance of the generated samples\", titlefont=8, xlabel=\"t\", ylabel=\"s\")","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"And compare it with the theoretical covariance:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"heatmap(tt, tt, covmat, title=\"Theoretical covariance\", titlefont=8, xlabel=\"t\", ylabel=\"s\")","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Apparently there are just numerical errors. Here are the heatmap and the surface plots of the difference:","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"heatmap(tt, tt, covmatW .- covmat, title=\"Difference\", titlefont=8, xlabel=\"t\", ylabel=\"s\")","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"surface(tt, tt, covmatW .- covmat, title=\"Difference\", titlefont=8, xlabel=\"t\", ylabel=\"s\")","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"Looks good!","category":"page"},{"location":"noises/fBm/#Benchmark","page":"Simulating fractional Brownian motion","title":"Benchmark","text":"","category":"section"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"The function fBm_noise(t0, T, y0, H, N) returns a fractional Brownian motion sampler. That means when we set noise = FractionalBrownianMotionProcess(t0, T, y0, H, N), then noise is a sampler, from which we draw sample paths with rand!(rng, noise, Yt), filling up the preallocated vector Yt with a sample path.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"When calling FractionalBrownianMotionProcess(t0, T, y0, H, N), a composite type is created containing cache vectors to hold the intermediate results needed when generating each sample path, including going through inverse and direct fast Fourier transforms. Besised creating the auxiliary cache vectors, it also builds the FFT plans used in the FFT transforms via FFTW.jl. In this way, the resulting sampler noise contains everthing pre-allocated so generating a sample is non-allocating. This can be benchmarked as follows.","category":"page"},{"location":"noises/fBm/","page":"Simulating fractional Brownian motion","title":"Simulating fractional Brownian motion","text":"H = Hs[1]\n@btime rand!($rng, $(noise[H]), $yt)\nnothing # hide","category":"page"},{"location":"theory/extras/#Extras","page":"Extras","title":"Extras","text":"","category":"section"},{"location":"theory/extras/#A-discrete-Gronwall-Lemma","page":"Extras","title":"A discrete Gronwall Lemma","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"For the estimate of the global error, we use the following discrete version of the Grownwall Lemma, which is a particular case of the result found in \\cite{GiraultRaviart1981} (see also \\cite{Clark1987}).","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Discrete Gronwall Lemma: Let (e_j)_j be a (finite or infinite) sequence of positive numbers starting at j=0 and satisfying","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    e_j leq a sum_i=0^j-1 e_i + b","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"for every j with e_0 = 0, and where a b geq 0. Then,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    e_j leq b e^aj qquad forall j","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"This follows, more precisely, from Lemma V.2.4 in Girault & Raviart (1981) by taking n = j, a_n = e_j, b_n = 0, c_n = b, and lambda = a.","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"For the sake of completenes, we present a simple proof valid for this particular case.","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"The result is trivially true for j=0. Suppose, by induction, that the result is true up to j-1. Then, using the estimate and the induction hypothesis, we find","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"   e_j leq a sum_i=0^j-1 be^ai + b = b left(a sum_i=0^j-1 e^ai + 1right)","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Using that 1 + a leq e^a, we have a leq e^a - 1, hence","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    e_j leq bleft((e^a - 1)sum_i=0^j-1 e^ia + 1right)","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Using that sum_i=0^j-1 alpha^i = (alpha^j - 1)(alpha - 1), with alpha = e^a, we see that","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    (e^a - 1)sum_i=0^j-1 e^ia leq e^ja - 1","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"so that","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    e_j leq be^ja","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"This completes the induction.","category":"page"},{"location":"theory/extras/#Integral-calculations-for-the-fBm-convergence","page":"Extras","title":"Integral calculations for the fBm convergence","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Here, we detail some calculations of deterministic integrals left out of the article.","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"At some point, we arrived at the following formula for the global error associated with the noise:","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    beginalign*\n        int_0^t_j  left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmds \n         = frac1Gamma(H + 12)int_0^t_j int_-infty^tau^N(s) left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmdW_xi mathrmds \n         qquad + frac1Gamma(H + 12)int_0^t_j int_tau^N(s)^s (s - xi)^H-12 mathrmdW_xi mathrmds \n         = frac1Gamma(H + 12)int_-infty^0 int_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds mathrmdW_xi \n         qquad + frac1Gamma(H + 12)int_0^t_j int_tau^N(xi)+Delta t_N^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right)  mathrmds mathrmdW_xi\n         qquad + frac1Gamma(H + 12)int_0^t_j int_xi^tau^N(xi) + Delta t_N (s - xi)^H-12 mathrmds mathrmdW_xi \n    endalign*","category":"page"},{"location":"theory/extras/#First-term","page":"Extras","title":"First term","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"For the first term, notice sigma mapsto 1(sigma - xi)^H-12 is continuously differentiable on the interval sigma  xi, so that","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    (s-xi)^H-12 - (tau^N(s)-xi)^H-12 = - (H-12)int_tau^N(s)^s (sigma - xi)^H - 32 mathrmdsigma","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Thus,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    int_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds = (H-12)int_0^t_j int_tau^N(s)^s (sigma - xi)^H - 32 mathrmdsigma mathrmds","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Exchanging the order of integration yields","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"beginalign*\n    int_0^t_j left( (s-xi)^H-12 right  left - (tau^N(s)-xi)^H-12 right) mathrmds \n     = (H-12)int_0^t_j int_sigma^tau^N(sigma) + Delta t_N (sigma - xi)^H - 32 mathrmds mathrmdsigma \n     = (H-12)int_0^t_j left(tau^N(sigma) + Delta t_N - sigmaright) (sigma - xi)^H - 32 mathrmdsigma\nendalign*","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Hence,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    leftint_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12 right) mathrmdsright \n    leq (12 - H)int_0^t_j Delta t_N (sigma - xi)^H - 32 mathrmdsigma","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Now, using the Lyapunov inequality and the Itô isometry, and using the same trick as above,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"beginalign*\n     mathbbEleftleftint_-infty^0 int_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds mathrmdW_xi rightright \n     qquadqquad leq left(int_-infty^0 left(int_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds right)^2 mathrmdxi right)^12 \n     qquadqquad leq Delta t_N left(int_-infty^0 left( (12 - H)int_0^t_j (sigma - xi)^H-32 mathrmdsigma right)^2 mathrmdxi right)^12 \n     qquadqquad leq (12 - H)Delta t_N left(int_-infty^0 left(int_0^T (sigma - xi)^H-32 mathrmdsigma right)^2 mathrmdxi right)^12\nendalign*","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Therefore,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    frac1Gamma(H + 12)Delta t_N mathbbEleftleftint_-infty^0 int_0^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds mathrmdW_xi rightright \n    leq C_H^(1)Delta t_N","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"for a suitable constant C_H^(1). We see this term is of order 1 in Delta t_N","category":"page"},{"location":"theory/extras/#Second-term","page":"Extras","title":"Second term","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"The second term is similar,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"beginalign*\n    int_tau^N(xi)+Delta t_N^t_j  left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds  \n     = (H-12)int_tau^N(xi)+Delta t_N^t_j int_tau^N(s)^s (sigma - xi)^H - 32 mathrmdsigma mathrmds \n     = (H-12)int_tau^N(xi)+Delta t_N^t_j int_sigma^tau^N(sigma) + Delta t_N (sigma - xi)^H - 32 mathrmds mathrmdsigma \n     = (H-12)int_tau^N(xi)+Delta t_N^t_j left(tau^N(sigma) + Delta t_N - sigmaright) (sigma - xi)^H - 32 mathrmdsigma\nendalign*","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Thus,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    left int_tau^N(xi)+Delta t_N^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds right \n    leq (12 - H)Delta t_N int_tau^N(xi)+Delta t_N^t_j (sigma - xi)^H - 32 mathrmdsigma","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Hence,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"beginalign*\n     mathbbEleftleftint_0^t_j int_tau^N(xi)+Delta t_N^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds mathrmdW_xirightright \n     qquadqquad leq left(int_0^t_j left(int_tau^N(xi)+Delta t_N^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right) mathrmds right)^2 mathrmdxi right)^12 \n     qquadqquad leq Delta t_N (12 - H)left(int_0^t_j left( int_tau^N(xi)+Delta t_N^T (sigma - xi)^H-32 mathrmdsigma right)^2 mathrmdxi right)^12\nendalign*","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Therefore,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    frac1Gamma(H + 12)mathbbEleftleftint_0^t_j int_tau^N(xi)+Delta t_N^t_j left( (s-xi)^H-12 - (tau^N(s)-xi)^H-12right)  mathrmds mathrmdW_xirightright \n    leq C_H^(2)Delta t_N","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"for a possibly different constant C_H^(2). This term is also of order 1.","category":"page"},{"location":"theory/extras/#Third-term","page":"Extras","title":"Third term","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"For the last term, we have","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    0 leq int_xi^tau^N(xi) + Delta t_N (s - xi)^H-12 mathrmds = frac1H + 12 (tau^N(xi) + Delta t_N - xi)^H + 12 \n    leq frac1H + 12 Delta t_N^H + 12","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"so that, using the Lyapunov inequality and the Itô isometry","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    mathbbEleftleftint_0^t_j int_xi^tau^N(xi) + Delta t_N (s - xi)^H-12 mathrmds mathrmdW_xirightright \n    leq left( int_0^t_j left(int_xi^tau^N(xi) + Delta t_N (s - xi)^H-12 mathrmdsright)^2 mathrmdxiright)^12  \n    leq left( int_0^t_j Delta t_N^2H + 1 mathrmdxiright)^12 leq t_j^12 Delta t_N^H + 12","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Therefore,","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    frac1Gamma(H + 12)mathbbEleftleftint_0^t_j int_xi^tau^N(xi) + Delta t_N (s - xi)^H-12 mathrmds mathrmdW_xirightright leq C_H^(3) Delta t_N^H + 12","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"for a third constant C_H^(3).","category":"page"},{"location":"theory/extras/#Putting-them-together","page":"Extras","title":"Putting them together","text":"","category":"section"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"Putting the three estimates together the noise error becomes","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"    mathbbEleftleftint_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmdsrightright \n    leq C_H^(4) Delta t_N + C_H^(3) Delta t_N^H + 12","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"where C_H^(4) = C_H^(1) + C_H^(2). ","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"This eventually leads to a strong error of the form","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"max_j=0 ldots NmathbbEleft left X_t_j - X_t_j^N right right leq C_1 Delta t_N + C_2 Delta t_N^H + 12 qquad forall N in mathbbN","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"for suitable constants C_1 C_2geq 0 This proves that the error is of the order of","category":"page"},{"location":"theory/extras/","page":"Extras","title":"Extras","text":"textrmstrong error lesssim maxH + 12 1","category":"page"},{"location":"theory/results/#Main-results","page":"Main results","title":"Main results","text":"","category":"section"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"Consider the random ordinary differential equation","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = f(t X_t Y_t) qquad 0 leq t leq T \n    left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"on a time interval I=0 T, with T  0, and where the noise Y_t_tin I is a given stochastic process. The sample space is denoted by Omega.","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"The Euler method for solving this initial value problem consists in approximating the solution on a uniform time mesh t_j = jDelta t_N, j = 0 ldots N, with fixed time step Delta t_N = TN, for a given Nin mathbbN. In such a mesh, the Euler scheme takes the form","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"  X_t_j^N = X_t_j-1^N + Delta t_N f(t_j-1 X_t_j-1^N Y_t_j-1) qquad j = 1 ldots N","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"with the initial condition","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"  X_0^N = X_0","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"When the noise Y_t_tin I has theta-Hölder continuous sample paths, it can be show Grune & Kloeden (2001), under suitable regularity conditions on f=f(t x y), that the Euler scheme converges pathwise with order theta with respect to the time step. Similarly, under suitable global conditions, that the convergence is in the strong sense, i.e. there exists a constant C geq 0 such that","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"    max_j=0 ldots NmathbbEleft left X_t_j - X_t_j^N right right leq C Delta t_N^theta qquad forall N in mathbbN","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"where mathbbEcdot indicates the expectation of a random variable on Omega.","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"We show, in the paper, that, in many classical examples, it is possible to exploit further conditions that yield in fact a strong order 1 convergence, with the sample paths still being Hölder continuous or even discontinuous, i.e.","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"    max_j=0 ldots NmathbbEleft left X_t_j - X_t_j^N right right leq C Delta t_N qquad forall N in mathbbN","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"This is the case, for instance, when the noise is a point process, a transport process, or an Itô process.","category":"page"},{"location":"theory/results/","page":"Main results","title":"Main results","text":"For a fractional Brownian motion process with Hurst parameter H, we still get strong order 1 convergence for 12 leq H  1, while for 0  H  12 the strong order of convergence drops to H + 12, which, however, is still higher than the previously estimated order of H, which is the Hölder regularity of the pathwise solutions.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/09-fisherkpp.jl\"","category":"page"},{"location":"examples/09-fisherkpp/#Random-Fisher-KPP-partial-differential-equation","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"","category":"section"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Here we simulate a Fisher-KPP equation with random boundary conditions, as inspired by the works of Salako & Shen (2020) and Freidlin & Wentzell (1992). The first work addresses the Fisher-KPP equation with a random reaction coefficient, while the second work considers more general reaction-diffusion equations but driven by random boundary conditions. The deterministic Fisher-KPP equations has its origins in Fisher (1937) and Kolmogorov, Petrovskii & Piscunov (1937)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We consider the Fisher-KPP equation driven by Neumann boundary conditions, with a random influx on the left end point and no flux on the right end point. The intent here is to illustrate the strong order 1 convergence rate on a nonlinear partial differential equation.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We use the method of lines (MOL), with finite differences in space, to approximate the random partial differential equation (PDE) by a system of random ODEs.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The equation is a nonlinear parabolic equation of reaction-diffusion type, modeling inhomogeneous population growth displaying wave propagation, and many other phenomena such as combustion front wave propagation, physiollogy and crystallography pattern formation, and so on. We force the system with a random incoming population on one of the boundaries of the spatial domain.","category":"page"},{"location":"examples/09-fisherkpp/#The-equation","page":"Random Fisher-KPP partial differential equation","title":"The equation","text":"","category":"section"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The equation takes the form","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracpartial udisplaystyle partial t = mufracpartial^2 upartial x^2 + lambda uleft(1 - fracuu_mright) quad (t x) in (0 infty) times (0 1)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"endowed with the boundary conditions","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracpartial upartial x(t 0) = - Y_t quad fracpartial upartial x(t 1) = 0","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"and a given a initial condition","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  u(0 x) = u_0(x)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The unknown u(t x) represents the density of a given quantity at time t and point x; D is a diffusivity coefficient; lambda is a reaction, or proliferation, coefficient; and u_m is a carrying capacity density coefficient.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The random process Y_t_t which drives the flux on the left boundary point, is taken to be a colored noise modulated by a exponentially decaying Hawkes process, representing random trains of incoming population.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"This equation displays traveling wave solutions with a minimum wave speed of 2 sqrtlambda mu. We choose lambda = 10 and mu= 0009, so the limit traveling speed is about 06. The carrying capacity is set to u_m = 10.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The initial condition is taken to be zero, u_0(x) = 0, so all the population originates from the left boundary influx.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The mass within the region 0leq x leq 1 satisfies","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracmathrmdmathrmd t int_0^1 u(t x) mathrmdx = muint_0^1 u_xx(t x) mathrmdx + lambda int_0^1 u(t x)left(1 - fracu(t x)u_mright)mathrmdx","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Using the boundary conditions, we find that","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracmathrmdmathrmd t int_0^1 u(t x) mathrmdx = mu Y_t  + fraclambdau_m int_0^1 u(t x)left(u_m - u(t x)right)mathrmdx","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"which is nonnegative, provided 0 leq u leq u_m and Y_t geq 0.","category":"page"},{"location":"examples/09-fisherkpp/#Numerical-approximation","page":"Random Fisher-KPP partial differential equation","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/09-fisherkpp/#Setting-up-the-problem","page":"Random Fisher-KPP partial differential equation","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"First we load the necessary packages:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"using Plots\nusing Random\nusing LinearAlgebra\nusing Distributions\nusing RODEConvergence\nusing BenchmarkTools","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Then we set up some variables as usual, starting with the random seed:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The time interval:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"t0, tf = 0.0, 2.0","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The discretization in space is made with l mesh points x_j = (j-1)  (l-1), for j = 1 ldots l, corresponding to l-1 mesh intervals of length Delta x = 1  (l-1). The points x_1 = 0 and x_l = 1 are the boundary points. For illustration purposes, we start by setting l to","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"l = 65","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Notice that for the target solution we need a very fine time mesh, on top of having to repeat the simulation a number of times for the Monte-Carlo estimate. This is computationally demanding for large l, so we choose a moderate number just for illustration purpose.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The initial mass is zero:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"u₀(x) = 0.0","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The discretized initial condition is then","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"u0law = product_distribution(Tuple(Dirac(u₀((j-1) / (l-1))) for j in 1:l)...)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"For the discretization of the equation we use finite differences with the classic second-order discretization of the second derivative:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracpartial^2 upartial x^2(t x_j) approx fracu(t x_j+1) - 2u(t x_j) + u(t x_j-1)Delta x^2 quad j = 1 ldots l","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Notice this goes up to the boundary points j=1 and j=l, corresponding to x=0 and x=1, and depends on the \"ghost\" points x_0 = -Delta x and x_l+1 = 1 + Delta x. These points are solved for by using the Neumann boundary conditions and a centered second-order finite difference approximation of the first derivative, namely","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  fracpartial upartial x(t x_j) approx fracu(t x_j+1 - u(t x_j-1))2Delta x","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"on the boundary points j=1 and j=l, so that","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"  u(t x_0) = u(t x_2) + 2Y_t Delta x qquad u(t x_l+1) = u(t x_l-1)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"These points are plugged into the second-order approximation of the second derivatives at the boundary points.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"This yields the following in-place formulation for the right-hand side of the MOL Random ODE approximation of the Random PDE.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"function f!(du, t, u, y) # ; μ=μ, λ=λ, uₘ=uₘ)\n    axes(u, 1) isa Base.OneTo || error(\"indexing of `x` should be Base.OneTo\")\n\n    μ = 0.009\n    λ = 10.0\n    uₘ = 1.0\n\n    l = length(u)\n    dx = 1.0 / (l - 1)\n    dx² = dx ^ 2\n\n    # interior points\n    for j in 2:l-1\n        du[j] = μ * (u[j-1] - 2u[j] + u[j+1]) / dx² + λ * u[j] * (1.0 - u[j] / uₘ)\n    end\n\n    # ghost points\n    gh0 = u[2] + 2dx * max(0.0, y[1] * y[2])\n    ghl1 = u[l-1]\n\n    # boundary points\n    du[1] = μ * ( u[2] - 2u[1] + gh0 ) / dx² + λ * u[1] * ( 1.0 - u[1] / uₘ )\n    du[l] = μ * ( ghl1 - 2u[l] + u[l-1] ) / dx² + λ * u[l] * ( 1.0 - u[l] / uₘ )\n    return nothing\nend","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We set the parameters for the equation","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"μ = 0.009\nλ = 10.0\nuₘ = 1.0","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Now we make sure this is non-allocating. We use a finer spatial mesh for testing.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"xx = 0.0:0.01:1.0\nu = sin.(π * xx) .^ 2\ndu = similar(u)\ny = [0.0, 0.0]\nt = 0.0\nf!(du, t, u, y)\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Visualize the results","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"plot(xx, u, label=\"u\")\nplot!(xx, du, label=\"du/dt\")","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"and check performace","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"@btime f!($du, $t, $u, $y)\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The noise is a colored Ornstein-Uhlenbeck noise truncated to non-negative values and modulated by a Hawkes process, which is implemented as two separate noises, which are combined in f!.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The Ornstein-Uhlenbeck is defined as follows","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"y0 = 0.0\nτ = 0.005 # time scale\nσ̃ = 0.1 # large-scale diffusion\nν = 1/τ # drift\nσ = σ̃/τ # diffusion\ncolored_noise = OrnsteinUhlenbeckProcess(t0, tf, y0, ν, σ)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"And the exponentially-decaying Hawkes process is defined by","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"λ₀ = 3.0\na = 0.3\nδ = 5.0\nβ = 1.8\nθ = 1/β\ndylaw = Exponential(θ)\n\nhawkes_envelope_noise = ExponentialHawkesProcess(t0, tf, λ₀, a, δ, dylaw)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The are combined into the following ProductProcess","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"noise = ProductProcess(colored_noise, hawkes_envelope_noise)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Here is a sample path of the two noises:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"tt = range(t0, tf, length=2^9)\nyt = Matrix{Float64}(undef, 2^9, 2)\nrand!(rng, noise, yt)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"plot(tt, yt, label=[\"OU\" \"Hawkes\"], xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\")","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"and the modulated and truncated colored noise:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"plot(tt, map(y -> max(0.0, y[1] * y[2]), eachrow(yt)), label=\"noise\", xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\")","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We also make sure drawing a noise sample path does not allocate:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"@btime rand!($rng, $noise, $yt)\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Now that we are done with testing, we set up the mesh parameters for the convergence. For stability reasons, we let Delta t sim Delta x^2 and make sure that 2mu Delta tDelta x^2 leq 1 This condition follows from the Von Neumann stability analysis, by checking for discrete solution E_jk = A e^alpha ktau  - i beta j h of the error, where tau = Delta t, h = Delta x, and requiring that the amplification factor at each time step is bounded by 1 + mathcalO(tau)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"l = 513 # 2^9 + 1\nu0law = product_distribution(Tuple(Dirac(u₀((j-1) / (l-1))) for j in 1:l)...)\nntgt = 2^18\nns = [2^5, 2^7, 2^9]\nks = [2^6, 2^5, 2^4]\n@info  (l-1) ./ ks # 2^9 ./ ks = [2^3 2^4 2^5] = [8 16 32]\n#nothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"and make sure they meet all the requirements:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"all(mod(ntgt, n) == 0 for n in ns) && ntgt ≥ last(ns)^2","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The number of simulations for the Monte-Carlo estimate of the rate of strong convergence","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"m = 40","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We then add some information about the simulation:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"info = (\n    equation = \"the Fisher-KPP equation\",\n    noise = \"Hawkes-modulated Ornstein-Uhlenbeck colored noise\",\n    ic = \"\\$X_0 = 0\\$\"\n)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"target = RandomEuler(length(u0law))\nmethod = RandomEuler(length(u0law))","category":"page"},{"location":"examples/09-fisherkpp/#Order-of-convergence","page":"Random Fisher-KPP partial differential equation","title":"Order of convergence","text":"","category":"section"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"With all the parameters set up, we build the convergence suite:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"suite = ConvergenceSuite(t0, tf, u0law, f!, noise, target, method, ntgt, ns, m, ks)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"Then we are ready to compute the errors:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/#Plots","page":"Random Fisher-KPP partial differential equation","title":"Plots","text":"","category":"section"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"We create a plot with the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"plt = plot(result)","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\",  \"order_fisherkpp.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"For the sake of illustration, we plot the evolution of a sample target solution:","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"dt = (tf - t0) / (ntgt - 1)\n\n@time anim = @animate for i in 1:div(ntgt, 2^7):div(ntgt, 1)\n    plot(range(0.0, 1.0, length=l), view(suite.xt, i, :), ylim=(0.0, 1.1), xlabel=\"\\$x\\$\", ylabel=\"\\$u\\$\", fill=true, title=\"population density at time t = $(round((i * dt), digits=3))\", legend=false)\nend\n\nnothing # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"gif(anim, fps = 30) # hide","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"","category":"page"},{"location":"examples/09-fisherkpp/","page":"Random Fisher-KPP partial differential equation","title":"Random Fisher-KPP partial differential equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/06-popdyn_gBmPoisson.jl\"","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/#Population-dynamics-with-sin-of-gBm-growth-and-step-process-harvest","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"This time we consider a population dynamics model with two types of noise, a geometric Brownian motion process affecting the growth rate and a point Poisson step process affecting the harvest.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/#The-equation","page":"Population dynamics with sin of gBm growth and step process harvest","title":"The equation","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"More precisely, we consider the RODE","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = Lambda_t X_t (r - X_t) - alpha H_t qquad 0 leq t leq T \n  left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"with","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"  Lambda_t = lambda(1 + epsilonsin(G_t))","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"where G_t_tgeq 0 is a geometric Brownian motion process and H_t_t geq 0 is a point Poisson step process with Beta-distributed steps.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We fix lambda = 10, epsilon = 03, r = 10, and alpha = 05. Notice the critical value for the bifurcation oscilates between lambda (1 - epsilon)  4 and lambda (1 + epsilon)  4, while the harvest term oscillates between 0 and alpha, and we choose alpha = lambda  2 so it oscillates below and above the critical value.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We choose a Beta distribution as the step law, with mean a little below 12, so it stays mostly below the critical value, but often above it.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The geometric Brownian motion process is chosen with drift mu = 1, diffusion sigma = 08 and initial value y_0 = 10.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The Poisson counter for the point Poisson step process is chosen with rate 15.0, while the time interval is chosen with unit time span.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"As for the initial condition, we also choose a Beta distribution, so it stays within the growth region, and with the same parameters as for the steps, just for the sake of simplicity.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We do not have an explicit solution for the equation so we use as target for the convergence an approximate solution via Euler method at a much higher resolution.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/#Numerical-approximation","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/#Setting-up-the-problem","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"First we load the necessary packages","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"using Plots\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"Then we set up the problem parameters.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We set the seed","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The right hand side of the evolution equation","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"function f(t, x, y)\n    γ = 1.0\n    ϵ = 0.3\n    r = 1.0\n    α = γ / 2\n    dx = x > zero(x) ? γ * (1 + ϵ * sin(y[1])) * x * (r - x) - α * y[2] : zero(x)\n    return dx\nend","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The time interval","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"t0, tf = 0.0, 1.0","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The law for the initial condition","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"x0law = Beta(7.0, 5.0)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The noise parameters","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"μ = 1.0\nσ = 0.8\ny0 = 1.0\nnoise1 = GeometricBrownianMotionProcess(t0, tf, y0, μ, σ)\n\nλ = 15.0\nsteplaw = Beta(5.0, 7.0)\nnoise2 = PoissonStepProcess(t0, tf, λ, steplaw)\n\nnoise = ProductProcess(noise1, noise2)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The mesh resolution","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"ntgt = 2^18\nns = 2 .^ (4:9)\nnsample = ns[[1, 2, 3, 4]]","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The number of samples for the Monte-Carlo estimate","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"m = 1_000","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"And add some information about the simulation:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"info = (\n    equation = \"population dynamics\",\n    noise = \"gBm and step process noises\",\n    ic = \"\\$X_0 \\\\sim \\\\mathrm{Beta}($(x0law.α), $(x0law.β))\\$\"\n)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"target = RandomEuler()\nmethod = RandomEuler()","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/#Order-of-convergence","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Order of convergence","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"@time result = solve(rng, suite)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2))\")\nnothing # hide","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/#Plots","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Plots","text":"","category":"section"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We illustrate the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plt = plot(result)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We save the plot for the inclusion in the article","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"order_popdyn_gBmPoisson.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"For the sake of illustration, we plot some approximations of a sample target solution:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plt = plot(suite, ns=nsample)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"This time we save this sample path approximation for illustration in the article","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"sample_popdyn_gBmPoisson.png\"))\nnothing # hide","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We can also visualize the noises associated with this sample solution:","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plot(suite, xshow=false, yshow=true, label=[\"Z_t\" \"H_t\"], linecolor=:auto)","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The gBm noises enters the equation via G_t = gamma(1 + epsilonsin(Z_t)). Using the chosen parameters, this noise can be visualized below","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plot(suite, xshow=false, yshow= y -> 1.0 + 0.3sin(y[1]), label=\"\\$G_t\\$\")","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"","category":"page"},{"location":"examples/06-popdyn_gBmPoisson/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"This page was generated using Literate.jl.","category":"page"},{"location":"noises/noiseintro/#Noises","page":"Noises","title":"Noises","text":"","category":"section"},{"location":"noises/noiseintro/","page":"Noises","title":"Noises","text":"In this part, we discuss a few noises that require an extra care, as the homogeneous linear Itô process noise and the fractional Brownian motion process, as well as the Ornstein-Uhlenbeck process as an approximation of the white noise.","category":"page"},{"location":"noises/colored/#Ornstein-Uhlenbeck-colored-noise-approximation-of-white-noise","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"","category":"section"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"White noise, as modeled by the \"derivative\" of the Wiener process, in a suitable distributional sense, is an ubiquotous noise in modelling stochastic behavior in evolutionary systems.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"In many situations, however, the actual noise is a colored noise, sometimes with a characteristic amplitude decay, giving a certain hue to the noise, or some other amplitude form.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Here, we explore the approximation of a white noise by an Ornstein-Uhlenbeck (OU) process O_t_t. This is achieved by controlling a time-scale tau for the process. More precisely, we assume O_t_t satisfies the stochastic differential equation (SDE)","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"    tau mathrmdO_t = - mathrmdt + varsigma mathrmdW_t","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"where W_t_t is a standard Wiener process. This leads to an Ornstein-Uhlenbeck process with drift nu = 1tau and diffusion sigma = varsigmatau. This process has mean, variance, and covariance given by","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"   mathbbEO_t = O_0 e^-fracdisplaystyle tdisplaystyletau quad mathrmVar(O_t) = fracvarsigma^22tau quad mathrmCov(O_tO_s) = fracvarsigma^22tau e^-fracdisplaystyle t - sdisplaystyle tau","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Hence, O_t and O_s are significantly correlated only within the time scale t - s lesssim tau.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Moreover, when","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"tau rightarrow 0 quad textrmwith quad fracvarsigma^22tau rightarrow 1","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"this process approximates a Gaussian white noise. This is equivalent to ","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"nu rightarrow infty quad fracsigma^22nu rightarrow 1","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"in the usual drift and diffusion Ornstein-Uhlenbeck parameters.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Below, we illustrate this approximation with a few numerical simulations.","category":"page"},{"location":"noises/colored/#Loading-the-packages","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Loading the packages","text":"","category":"section"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"We start by loading the necessary packages:","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"using Random\nusing Distributions\nusing Statistics\nusing BenchmarkTools\nusing FFTW\nusing LinearAlgebra\nusing Plots\nusing RODEConvergence","category":"page"},{"location":"noises/colored/#Setup","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Setup","text":"","category":"section"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"We fix the initial condition y0 and the initial and final times t0 and tf of the time interval of the desired simulations. We also fix the size n of the sample paths. The sample paths will be generated for a set of n times uniformly distributed within the time interval from t0 to tf, which yields a time mesh which we define as tt:","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"y0 = 0.0\nt0 = 0.0\ntf = 2.0\nn = 2^10\ntt = range(t0, tf, length=n)\ndt = (tf - t0) / (n - 1)\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"We also choose a few set of parameters for the Ornstein-Uhlenbeck process, to illustrate the convergence process.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"τs = (1.0, 0.1, 0.01, 0.001)\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"With this setup, we create the corresponding OU processes:","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"ou_noises = (OrnsteinUhlenbeckProcess(t0, tf, y0, 1/τ, √(2/τ)) for τ in τs)\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"This noises is a Tuple where each element is an OU sampler. With each sampler noises[i], we draw a sample path with rand!(rng, noises[i], yt), with a given random number generator rng and a vector of floats yt of size n, so that this sampling fills up the pre-allocated vector yt with a sample path over the interval t0 to tf, with the corresponding resolution dt = (tf - t0) / (n - 1). For that, we set up the rng, used for reproducibility.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"rng = Xoshiro(123)","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Let us visualize a sample path of these process. We define the resolution, pre-allocate some vectors, and compute the sample paths.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"w_t = Vector{Float64}(undef, n) # for the white noise\nous_t = [Vector{Float64}(undef, n) for τ in τs] # for the OU noises\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Now we draw sample paths of the OU noise","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"for (i, ou_n) in enumerate(ou_noises)\n    rand!(rng, ou_n, ous_t[i])\nend","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"as well as a white noise sample path","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"rand!(rng, Normal(), w_t)\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"For the sake of comparison, let us check their mean and variance","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"for (τ, ou_t) in zip(τs, ous_t)\n    println(\"OU process with τ=$τ:\")\n    println(\"  Mean $(mean(ou_t))\")\n    println(\"  Variance $(var(ou_t))\")\nend\nprintln(\"White noise:\")\nprintln(\"  Mean $(mean(w_t))\")\nprintln(\"  Variance $(var(w_t))\")\nnothing # hide","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"Now we plot the obtained sample paths:","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"plts = [plot(tt, ou_t, xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\", guidefont=10, label=\"OU τ = $τ\", legend=:topright) for (τ, ou_t) in zip(τs, ous_t)]\npltw = plot(tt, w_t, xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\", guidefont=10, legend=:topright)\nplot(plts..., pltw, layout=(length(plts) + 1, 1), size=(600, 900))","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"We can also check the spectrum of each sample path signal, using JuliaMath/FFTW.jl.","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"plts = [plot(abs2.(rfft(ou_t)), xlabel=\"\\$k\\$\", ylabel=\"\\$\\\\hat y\\$\", guidefont=10, label=\"OU τ = $τ spectrum\", legend=:topright) for (τ, ou_t) in zip(τs, ous_t)]\npltw = plot(abs2.(rfft(w_t)), xlabel=\"\\$k\\$\", ylabel=\"\\$\\\\hat y\\$\", guidefont=10, label=\"white noise spectrum\", legend=:topright)\nplot(plts..., pltw, layout=(length(plts) + 1, 1), size=(600, 900))","category":"page"},{"location":"noises/colored/","page":"Ornstein-Uhlenbeck colored noise approximation of white noise","title":"Ornstein-Uhlenbeck colored noise approximation of white noise","text":"For a proper evaluation of the statistics of the processes above, we should draw many samples and average them, but the above suffices for illustrative purposes.","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/07-toggle_switch.jl\"","category":"page"},{"location":"examples/07-toggle_switch/#A-toggle-switch-model-for-gene-expression","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"","category":"section"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"Here, we consider the toggle-switch model in Section 7.8 of Asai (2016), originated from Verd, Crombach & Jaeger (2014). See also Strasser, Theis & Marr (2012).","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"Toogle switches in gene expression consist of genes that mutually repress each other and exhibit two stable steady states of ON and OFF gene expression. It is a regulatory mechanism which is active during cell differentiation and is believed to act as a memory device, able to choose and maintain cell fate decisions.","category":"page"},{"location":"examples/07-toggle_switch/#The-equation","page":"A toggle-switch model for gene expression","title":"The equation","text":"","category":"section"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We consider the following simple model as discussed in Asai (2016), of two interacting genes, X and Y, with the concentration of their corresponding protein products at each time t denoted by X_t and Y_t. These are stochastic processes defined by the system of equations","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"  begincases\n  fracdisplaystyle mathrmdX_tdisplaystyle mathrmd t = left( A_t + fracdisplaystyle X_t^4displaystyle a^4 + X_t^4right)left(fracdisplaystyle b^4displaystyle b^4 + Y_t^4right) - mu X_t  \n  fracdisplaystyle mathrmdY_tdisplaystyle mathrmd t = left( B_t + fracdisplaystyle Y_t^4displaystyle c^4 + Y_t^4right)left(fracdisplaystyle d^4displaystyle d^4 + X_t^4right) - nu Y_t  \n  left X_t right_t = 0 = X_0  \n  left Y_t right_t = 0 = Y_0\n  endcases","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"where A_t_tgeq 0 and B_t_tgeq 0 are given stochastic process representing the external activation on each gene; a and c determine the auto-activation thresholds; b and d determine the thresholds for mutual repression; and mu and nu are protein decay rates. In this model, the external activation A_t is a compound Poisson processes (cP), while B_t is a time-dependent version of the geometric Brownian motion process (tgBm).","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"In the simulations below, we use the following parameters: We fix a = c = 025; b = d = 04; and mu = nu = 075. The initial conditions are set to X_0 = Y_0 = 40. The external activation A_t_t is a compound Poisson process with Poisson rate lambda = 50 and jumps uniformly distributed on 00 05. The external activation B_t_t is a non-autonomous version of a geometric Brownian motion process given by","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"  mathrmdB_t = (mu_1 + mu_2sin(omega t))B_tmathrmdt + sigmasin(omega t)B_tmathrmdW_t","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"and we choose mu_1 = 05 mu_2 = 03 sigma = 03 and omega=3pi with initial condition A_0 = 02","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We don't have an explicit solution for the equation so we just use as target for the convergence an approximate solution via Euler method at a much higher resolution.","category":"page"},{"location":"examples/07-toggle_switch/#Numerical-approximation","page":"A toggle-switch model for gene expression","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/07-toggle_switch/#Setting-up-the-problem","page":"A toggle-switch model for gene expression","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"First we load the necessary packages:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"using Plots\nusing Random\nusing LinearAlgebra\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"Then we define the random seed:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The evolution law:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"function f!(dx, t, x, y)\n    a⁴ = c⁴ = 0.25 ^ 4\n    b⁴ = d⁴ = 0.4 ^ 4\n    μ = ν = 0.75\n    α = y[1]\n    β = y[2]\n    x₁⁴ = x[1]^4\n    x₂⁴ = x[2]^4\n    dx[1] = ( α + x₁⁴ / (a⁴  + x₁⁴) ) * ( b⁴ / ( b⁴ + x₂⁴)) - μ * x[1]\n    dx[2] = ( β + x₂⁴ / (c⁴  + x₂⁴) ) * ( d⁴ / ( d⁴ + x₁⁴)) - ν * x[1]\n    return dx\nend","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The time interval:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"t0, tf = 0.0, 5.0","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The law for the initial condition:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"x0 = 4.0\ny0 = 4.0\nx0law = product_distribution(Dirac(x0), Dirac(y0))","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The compound Poisson and the geometric Brownian motion processes, for the noisy source terms:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"BM = 0.5\nBλ = 5.0\nBylaw = Uniform(0.0, BM)\nAμ1 = 0.7\nAμ2 = 0.3\nAσ = 0.3\nAω = 3π\nA0 = 0.2\nAprimitive_a = t -> Aμ1 * t - Aμ2 * cos(Aω * t) / Aω\nAprimitive_b2 = t -> Aσ^2 * ( t/2 - sin(Aω * t) * cos(Aω * t) / 2Aω )\nnoise = ProductProcess(\n    CompoundPoissonProcess(t0, tf, Bλ, Bylaw),\n    HomogeneousLinearItoProcess(t0, tf, A0, Aprimitive_a, Aprimitive_b2)\n)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The resolutions for the target and approximating solutions, as well as the number of simulations for the Monte-Carlo estimate of the strong error:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"ntgt = 2^18\nns = 2 .^ (5:9)\nnsample = ns[[1, 2, 3, 4]]\nm = 100","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"And add some information about the simulation:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"info = (\n    equation = \"a toggle-switch model of gene regulation\",\n    noise = \"coupled compound Poisson process and geometric Brownian motion noises\",\n    ic = \"\\$X_0 = $x0, Y_0 = $y0\\$\"\n)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"target = RandomEuler(length(x0law))\nmethod = RandomEuler(length(x0law))","category":"page"},{"location":"examples/07-toggle_switch/#Order-of-convergence","page":"A toggle-switch model for gene expression","title":"Order of convergence","text":"","category":"section"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"suite = ConvergenceSuite(t0, tf, x0law, f!, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/#Plots","page":"A toggle-switch model for gene expression","title":"Plots","text":"","category":"section"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We plot the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"plt_result = plot(result)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"savefig(plt_result, joinpath(@__DIR__() * \"../../../../latex/img/\", \"order_toggleswitch.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"For the sake of illustration of the behavior of the system, we rebuild the problem with a longer time step and do a single run with it, for a single sample solution.","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"t0, tf = 0.0, 10.0\nm = 1\nns = 2 .^ (6:9)\nsuite = ConvergenceSuite(t0, tf, x0law, f!, noise, target, method, ntgt, ns, m)\n@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We visualize the pair of solutions","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"plt_sols = plot(suite, xshow=1, ns=nothing, label=\"X_t\", linecolor=1)\nplot!(plt_sols, suite, xshow=2, ns=nothing, label=\"Y_t\", linecolor=2, ylabel=\"\\$\\\\textrm{concentration}\\$\")","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"savefig(plt_sols, joinpath(@__DIR__() * \"../../../../latex/img/\", \"evolution_toggleswitch.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We also illustrate the convergence to say the expression of the X gene:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"plt_suite = plot(suite)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"savefig(plt_suite, joinpath(@__DIR__() * \"../../../../latex/img/\", \"approximation_toggleswitch.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We can also visualize the noises associated with this sample solution:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"plt_noises = plot(suite, xshow=false, yshow=true, label=[\"\\$A_t\\$\" \"\\$B_t\\$\"], linecolor=[1 2])","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"savefig(plt_noises, joinpath(@__DIR__() * \"../../../../latex/img/\", \"noises_toggleswitch.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"We finally combine all plots into a single one, for the article:","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"plt_combined = plot(plt_result, plt_sols, plt_suite, plt_noises, size=(800, 600), title=[\"(a)\" \"(b)\" \"(c)\" \"(d)\"], titlefont=10)","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"savefig(plt_combined, joinpath(@__DIR__() * \"../../../../latex/img/\", \"toggleswitch_combined.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"","category":"page"},{"location":"examples/07-toggle_switch/","page":"A toggle-switch model for gene expression","title":"A toggle-switch model for gene expression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Here we include the docstrings of the methods implemented in RODEConvergence.jl, including noise processes, solver methods, and convergence estimate tools.","category":"page"},{"location":"api/#Noises","page":"API","title":"Noises","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"WienerProcess","category":"page"},{"location":"api/#RODEConvergence.WienerProcess","page":"API","title":"RODEConvergence.WienerProcess","text":"WienerProcess(t0, tf, y0)\n\nConstruct a Wiener process on the interval t0 to tf, with initial condition y0.\n\nThe noise process noise = WienerProcess(t0, tf, y0) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\nSince, by definition, Delta W_t sim mathcalN(0 t), a sample path is constructed recursively by solving the recursive relation\n\nW_t_i = W_t_i-1 + sqrtdt z_i qquad i = 1 ldots\n\nwhere at each step z_i is drawn from a standard Normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"OrnsteinUhlenbeckProcess","category":"page"},{"location":"api/#RODEConvergence.OrnsteinUhlenbeckProcess","page":"API","title":"RODEConvergence.OrnsteinUhlenbeckProcess","text":"OrnsteinUhlenbeckProcess(t0, tf, y0, ν, σ)\n\nConstruct an Ornstein Uhlenbeck process O_t on the interval t0 to tf, with initial condition y0, drift -ν and diffusion σ, as defined by the equation\n\nmathrmdO_t = -nu O_t mathrmdt + sigma mathrmdW_t\n\nThe solution is\n\nO_t = e^-nu tO_0 + sigma int_0^t e^-nu (t - s)mathrmdW_s\n\nThe noise process noise = OrnsteinUhlenbeckProcess(t0, tf, y0, ν, σ) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\nNotice the integral term is a Normal random variable with zero mean and variance\n\nmathbbEleft left( sigma int_0^t e^-nu (t - s) mathrmdW_sright)^2right = fracsigma^22nuleft( 1 - e^-2nu t right)\n\nThus, a sample path is constructed with exact distribution by solving the recursion relation\n\nO_t_i = e^-nu Delta t O_t_i-1 + fracsigmasqrt2nu sqrt1 - e^-2nu Delta t z_i qquad i = 1 ldots\n\nwhere at each time step z_i is drawn from a standard Normal distribution.\n\nThe Ornstein-Uhlenbeck process has mean, variance, and covariance given by\n\n    mathbbEO_t = O_0 e^-\nu t mathrmVarO_t = fracsigma^22nu quad mathrmCovO_tO_s = fracsigma^22nu e^-\nu t - s\n\nso that O_t and O_s are significantly correlated only when t - s lesssim tau, where tau = 1nu is a characteristic time scale for the process. When tau rightarrow 0, i.e. nu rightarrow infty,  with sigma^2  2nu = tausigma^22 rightarrow 1, this approximates a Gaussian white noise.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.HomogeneousLinearItoProcess","category":"page"},{"location":"api/#RODEConvergence.HomogeneousLinearItoProcess","page":"API","title":"RODEConvergence.HomogeneousLinearItoProcess","text":"HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_bsquare)\n\nConstruct a homogeneous linear Itô process noise Y_t on the interval t0 to tf, with initial condition y0, as defined by the equation\n\nmathrmdY_t = a(t) Y_t mathrmdt + b(t) Y_t mathrmdW_t\n\nprovided the primitive of a=a(t) and the primitive of b^2 = b(t)^2 are given, via primitive_a and primitive_bsquare, respectively.\n\nThe noise process noise = HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_bsquare) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nThe exact solution has the form\n\nY_t = y_0 e^int_0^t (a(s) - fracb(s)^22) mathrmds + int_0^t b(s) mathrmdW_s\n\nThe basic statistics for this process can be computed by first computing the statistics for its logarithm, which satisfies\n\nmathbbEleft ln Y_t right = ln y_0 + int_0^t (a(s) - fracb(s)^22) mathrmds\n\nand\n\nmathrmVarleft( ln Y_t right) = int_0^t b(s)^2 mathrmds\n\nThen, since ln Y_t is Gaussian, Y_t is log-normal with\n\nmathbbEleft Y_t right = y_0 e^int_0^t a(s) mathrmds\n\nand\n\nmathrmVarleft( Y_t right) = y_0^2 e^int_0^t 2a(s) mathrmdsleft( e^int_0^t b(s)^2 mathrmds - 1 right)\n\nA distributionally exact solution is computed on the mesh points in a recursive manner by\n\nY_t_j = Y_t_j-1 e^(p_a(t_j) - p_a(t_j-1)) - (p_b^2(t_j) - p_b^2(t_j-1)2 + Z_j) qquad j = 1 ldots\n\nwith Y_0 = y_0, and where p_a = p_a(t) is the given primitive of a=a(t), p_b^2 = p_b^2(t) is the given primitive of b^2 = b(t)^2, and Z_j sim mathcalN(0 p_b^2(t_j) - p_b^2(t_j-1)).\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"GeometricBrownianMotionProcess","category":"page"},{"location":"api/#RODEConvergence.GeometricBrownianMotionProcess","page":"API","title":"RODEConvergence.GeometricBrownianMotionProcess","text":"GeometricBrownianMotionProcess(t0, tf, y0, μ, σ)\n\nConstruct a Geometric Brownian motion process Y_t on the interval t0 to tf, with initial condition y0, drift μ and diffusion σ, as defined by\n\nmathrmdY_t = mu Y_t mathrmdt + sigma Y_t mathrmdW_t\n\nThe noise process noise = GeometricBrownianMotionProcess(t0, tf, y0, μ, σ) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"CompoundPoissonProcess","category":"page"},{"location":"api/#RODEConvergence.CompoundPoissonProcess","page":"API","title":"RODEConvergence.CompoundPoissonProcess","text":"CompoundPoissonProcess(t0, tf, λ, dylaw)\n\nConstruct a Compound Poisson process on the interval t0 to tf, with point Poisson counter with rate parameter λ and increments given by the distribution dylaw.\n\nThe noise process noise = CompoundPoissonProcess(t0, tf, λ, dylaw) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe noise process returned by the constructor yields a random sample path of\n\nY_t = sum_i=1^N_t mathrmdY_i\n\nwhere N_t is the number of events up to time t.\n\nThen, based on the number n of events, the increment is performed by adding n samples of the given increment distribution dylaw.\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is set to yt[1] = 0, corresponding to the value at time t0.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"PoissonStepProcess","category":"page"},{"location":"api/#RODEConvergence.PoissonStepProcess","page":"API","title":"RODEConvergence.PoissonStepProcess","text":"PoissonStepProcess(t0, tf, λ, steplaw)\n\nConstruct a point Poisson process on the interval t0 to tf, with a point Poisson counter with rate parameter λ and step values given by the distribution steplaw.\n\nThe noise process noise = PoissonStepProcess(t0, tf, λ, steplaw) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe noise returned by the constructor yields a random sample path of Y_t = Y_N_t obtained by first drawing the number n of events between consecutive times with interval dt according to the Poisson distribution n = N(t+dt) - N(t) = Poisson(λdt).\n\nThen, based on the number n of events, the next state is repeated from the previous value, if n is zero, or set to a new sample value of Y, if n is positive. Since it is not cumulative and it has the Markov property, it doesn't make any difference, for the discretized sample, whether n is larger than 1 or not.\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"ExponentialHawkesProcess","category":"page"},{"location":"api/#RODEConvergence.ExponentialHawkesProcess","page":"API","title":"RODEConvergence.ExponentialHawkesProcess","text":"ExponentialHawkesProcess(t0, tf, λ₀, a, δ, dylaw)\n\nConstruct an Exponentially Decaying Hawkes process on the interval t0 to tf, with point Poisson counter with rate parameter λ, jump increments given by the distribution dylaw, and exponential decay with rate δ. \n\nAn exponentially decaying Hawkes process is a self-exciting point process lambda_t, representing a time-dependent intensity rate for an inhomogenous Poisson counter with an initial intensity lambda_0, a reversion level a with lambda_0 geq a geq 0, an exponential decay with rate delta  0, and positive stationary random jump increments S_k, at each arrival time T_k. The process is define by\n\n    lambda_t = a + (lambda_0 - a) e^-delta (t-t_0) + sum_t_0 leq T_k  t S_k e^-delta (t - T_k) quad t geq t_0\n\nThe noise process noise = ExponentialHawkesProcess(t0, tf, λ, δ, dylaw) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe noise returned by the constructor yields a random sample path by first drawing the interarrival times, along with the increments given by dylaw, during each mesh time interval, and then applying the exponential decay.\n\nThis implementation of the Hawkes process follows A. Dassius and H. Zhao, Exact simulation of Hawkes process with exponentially decaying intensity, Electron. Commun. Probab. 18 (2013), no. 62, 1-13.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"TransportProcess","category":"page"},{"location":"api/#RODEConvergence.TransportProcess","page":"API","title":"RODEConvergence.TransportProcess","text":"TransportProcess(t0, tf, ylaw, f, d)\n\nConstruct a transport process on the time interval t0 to tf, with function f=f(t, y) where y is a random vector with dimension d and distribution law for each coordinate given by ylaw.\n\nThe noise process noise = TransportProcess(t0, tf, ylaw, f, d) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nEach random sample path is obtained by first drawing d realizations of the distribution ylaw to build the sample value y and then defining the sample path by Y_t = f(t, y) for each t in the time mesh.\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"FractionalBrownianMotionProcess","category":"page"},{"location":"api/#RODEConvergence.FractionalBrownianMotionProcess","page":"API","title":"RODEConvergence.FractionalBrownianMotionProcess","text":"FractionalBrownianMotionProcess(t0, tf, y0, hurst, d; flags=FFTW.MEASURE)\n\nConstruct a fractional Brownian motion process on the interval t0 to tf, with initial condition y0, Hurst parameter hurst and length up to d.\n\nThe noise process noise = FractionalBrownianMotionProcess(t0, tf, y0, hurst, d; flags=FFTW.MEASURE) returned by the constructor is a subtype of AbstractNoise{Univariate}.\n\nSample paths are obtained by populating a pre-allocated vector yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the length of the given vector yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (length(yt) - 1). The initial condition is yt[1] = y0, corresponding to the value at time t0. The length of yt must be smaller than or equal to the length d given in the constructor and used for the pre-allocation of the auxiliary vectors.\n\nThe method implemented is the one developed by Davies and Harte and uses an FFT transform to drop the order of complexity to O(N log N). For the transform, we use FFTW.jl, and use the flag flags=FFTW.MEASURE for generating the plans. Other common flags can be passed instead.\n\nThis implementation of fractional Brownian motion via Davies-Harte method follows Dieker, T. (2004) Simulation of Fractional Brownian Motion. MSc Theses, University of Twente, Amsterdam and A. B. Dieker and M. Mandjes, On spectral simulation of fractional Brownian motion, Probability in the Engineering and Informational Sciences, 17 (2003), 417-434\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"ProductProcess","category":"page"},{"location":"api/#RODEConvergence.ProductProcess","page":"API","title":"RODEConvergence.ProductProcess","text":"ProductProcess(noises...)\n\nConstruct a multivariate process from independent univariate processes.\n\nThe noise process noise = ProductProcess(noises...) returned by the constructor is a subtype of AbstractNoise{Multivariate}.\n\nSample paths are obtained by populating a pre-allocated matrix yt with the sample path, via rand!(rng, noise, yt).\n\nThe number of steps for the sample path is determined by the number of rows of the given matrix yt, and the time steps are uniform and calculated according to dt = (tf - t0) / (size(yt, 1) - 1).\n\nEach columns of yt is populated with a sample path from each univariate process in noise.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.UnivariateProcess{T}","category":"page"},{"location":"api/#RODEConvergence.UnivariateProcess","page":"API","title":"RODEConvergence.UnivariateProcess","text":"UnivariateProcess{T}\n\nSupertype for univariate noise processes.\n\nAlias for AbstractProcess{T, Univariate}.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.MultivariateProcess{T}","category":"page"},{"location":"api/#RODEConvergence.MultivariateProcess","page":"API","title":"RODEConvergence.MultivariateProcess","text":"MultivariateProcess{T}\n\nSupertype for multivariate noise processes.\n\nAlias for AbstractProcess{T, Multivariate}.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.rand!","category":"page"},{"location":"api/#Random.rand!","page":"API","title":"Random.rand!","text":"rand!(rng::AbstractRNG, noise::AbstractProcess{T}, yt::VecOrMat{T})\n\nGenerate sample paths of the noise process.\n\nPopulate the vector or matrix yt with a sample path of the process noise, with random numbers generated from rng. See each noise type for details.\n\n\n\n\n\n","category":"function"},{"location":"api/#Solver-methods","page":"API","title":"Solver methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"RandomEuler","category":"page"},{"location":"api/#RODEConvergence.RandomEuler","page":"API","title":"RODEConvergence.RandomEuler","text":"RandomEuler(T::DataType=Float64, n::Int=0)\n\nInstantiate a RandomEuler method including a cache vector of length n for a non-allocating solver via the Euler method, solved by solve!(xt, t0, tf, x0, f::F, yt::AbstractVector{T}, ::RandomEuler))]\n\nSet n to 0 for solving a scalar equation and set n to the length of the system (e.g. the length of the initial condition).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RandomHeun","category":"page"},{"location":"api/#RODEConvergence.RandomHeun","page":"API","title":"RODEConvergence.RandomHeun","text":"RandomHeun(T::DataType=Float64, n::Int=0)\n\nInstantiate a RandomHeun method including two cache vectors of length n for a non-allocating solver via the Heun method, solved by solve!(xt, t0, tf, x0, f::F, yt::Vector{T}, ::RandomHeun)).\n\nSet n to 0 for solving a scalar equation and set n to the length of the system (e.g. the length of the initial condition).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.CustomMethod","category":"page"},{"location":"api/#RODEConvergence.CustomMethod","page":"API","title":"RODEConvergence.CustomMethod","text":"CustomMethod{F, P, N} <: RODEMethod{N}\n\nCustom method for solving a Random ODE. It has two fields:\n\nsolver: a function solver(xt, t0, tf, x0, f, yt, params) to solve, on the interval t0 to tf, a Random ODE with right hand side f, \"noise\" sample path yt, initial condition x0 and extra paramters params;\nparams: any argument or series of arguments necessary for the custom solver.\n\nAliases:\n\nCustomUnivariateMethod{F, P} = CustomMethod{F, P, Univariate}\nCustomMultivariateMethod{F, P} = CustomMethod{F, P, Multivariate}\n\n\n\n\n\n","category":"type"},{"location":"api/#Error-estimation","page":"API","title":"Error estimation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.ConvergenceSuite","category":"page"},{"location":"api/#RODEConvergence.ConvergenceSuite","page":"API","title":"RODEConvergence.ConvergenceSuite","text":"ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, ks, m)\n\nGather the data needed for computing the convergence error for a given RODE of the form\n\n    begincases\n        fracmathrmdX_tmathrmdt = f(t X_t Y_t)  t_0 leq t leq t_f \n        X_t_0 = X_0\n    endcases\n\nThe data comprises of the following:\n\nthe initial and final times t0 and tf;\nthe univariate or multivariate distribution x0law for the initial condition X_0;\nthe right-hand-side term f for the equation, either in the out-of-place form f=f(t, x, y), for a scalar equation (i.e. with a univariate initial condition x0law), or in the in-place form f=f(dx, t, x, y), for a system of equations (i.e. with a multivariate initial condition x0law);\nthe univariate or multivariate process noise for the noise term Y_t;\nthe method target to compute the target solution for the error calculation via solve!(xt, t0, tf, x0, f, yt, target), typically EulerMethod() with a much finer resolution with ntgt mesh points or the order of the square of the highest number of mesh points in ns (see below) or a lower resolution CustomMethod() with an exact distribution of the possible solutions conditioned to the already computed noise points;\nthe method to approximate the solution, typically the EulerMethod(), also in the form solve!(xt, t0, tf, x0, f, yt, method);\nthe number ntgt of mesh points in the fine mesh on which the target solution will be computed;\nthe vector ns with a list of numbers of mesh points to compute the approximate solutions;\nthe number m of sample paths to be computed for estimating the strong error via Monte Carlo method.\nthe range of steps ks to be used in case one approximates a Random PDE with an increasing number of spatial discretization points, so for each n in ns, one uses a range begin:k:end for the points in the spatial discretization, which defaults to k=[1] in the case of a scalar or of a genuine system of RODEs;\n\nBesides these data obtained from the supplied arguments, a few cache vectors or matrices are created:\n\na vector or matrix yt to hold the sample paths of the noise on the finest mesh, with length or row-length being ntgt and the shape depending on whether the noise is univariate or multivariate;\na vector or matrix xt to hold the sample paths of the target solution, on the finest mesh, with length or row-length being ntgt and the shape depending on whether the law for the initial condition being univariate or multivariate;\na vector or matrix xnt to hold the sample paths of the approximate solution, with length or row-length being the maximum of those in ns and the shape depending on whether the law for the initial condition being univariate or multivariate.\n\nThe actual error is obtained by solving a ConvergenceSuite via solve(rng::AbstractRNG, suite::ConvergenceSuite{T}) with a given RNG.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.ConvergenceResult","category":"page"},{"location":"api/#RODEConvergence.ConvergenceResult","page":"API","title":"RODEConvergence.ConvergenceResult","text":"ConvergenceResult{T, S}(suite::S, deltas::Vector{T}, trajerrors::Matrix{T}, trajstderrs::Matrix{T}, errors::Vector{T}, stderrs::Vector{T}, lc::T, p::T, pmin::T, pmax::T) where {T, S}\n\nStores the result of solve(rng, suite) with fields\n\nsuite: the ConvergenceSuite which is to be solved for;\ndeltas: the time steps associated with the number of mesh points in the vector suite.ns;\ntrajerrors: a matrix where each column corresponds to the strong error, along the trajectory, at each mesh resolution determined by suite.ns, i.e. trajerrors[i, k] is the error at time t_0 + i Delta t, for the time step Delta t = (t_f - t_0)  (n - 1) associated with the kth element n = suite.ns[k];\ntrajstderrs: a matrix with the corresponding standard error for each entry in trajerrors;\nerrors: the maximum, along the trajectory, of the trajerrors;\nstderrs: the corresponding standard error for the Monte-Carlo estimate of the strong errors;\nlc: the logarithm log(C) of the multiplicative constant in the fitted error CΔtᵖ;\np: the estimated order of the strong convergence;\npmin and pmax: the 95% confidence interval for p;\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.solve","category":"page"},{"location":"api/#RODEConvergence.solve","page":"API","title":"RODEConvergence.solve","text":"solve(rng, suite::ConvergenceSuite)\n\nCompute the strong errors and the order of convergence of the given suite.\n\nThe result is returned in the form of a ConvergenceResult.\n\n\n\n\n\n","category":"function"},{"location":"api/#Output","page":"API","title":"Output","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"generate_error_table","category":"page"},{"location":"api/#RODEConvergence.generate_error_table","page":"API","title":"RODEConvergence.generate_error_table","text":"generate_error_table(result, info)\n\nGenerate the markdown table with the data for the strong errors. \n\nThis is obteined from result.errors, with time steps result.deltas and lengths result.suite.ns, and the provided info for the problem, where info is given as a namedtuple with String fields info.equation, info.ic, and info.noise.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.plot_convergence","category":"page"},{"location":"api/#RODEConvergence.plot_convergence","page":"API","title":"RODEConvergence.plot_convergence","text":"plot(results::ConvergenceResult)\n\nPlot the convergence estimate in a log-log scale (time step vs strong error).\n\nIt is based on the values provided in results, as computed by solve(::ConvergenceSuite).\n\nThe plot consists of a scatter plot for the results.errors and a line plot from the fitted errors ≈ C Δtᵖ, where C = exp(lc), with Δt in results.deltas, lc = results.lc, and p = results.p, with appropriate legends.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.plot_suite","category":"page"},{"location":"api/#RODEConvergence.plot_suite","page":"API","title":"RODEConvergence.plot_suite","text":"plot(suite::ConvergenceSuite; ns = suite.ns, xshow=true, yshow=false, noisealpha=nothing, resolution=2^9)\n\nPlot the target solution, the noise and a few sample paths.\n\nPlot the target solution in suite.xt, the noise in suite.yt, and a few sample paths in the interval t0 to tf, with different time steps as defined by the number of mesh points in suite.ns or as given by the keyword ns as a vector of integers with the desired numbers of mesh points.\n\nThe noise, the target solution, and the approximations can be displayed or not, according to the keywords xshow, yshow and ns. If any of them is set to false or nothing, then the corresponding series is not showed.\n\nThe linealpha for plotting the noise can be changed via keyword noiselpha.\n\nIf suite refers to a system of equations (i.e. with x0law as a MultivariateDistribution instead of a UnivariateDistribution, one can choose to display one or more specific coordinates by specifying the keyword xshow in several possible ways, e.g. xshow=2 (for the second coordinate), or xshow=1:3 (for the first to third coordinates as separate series), or even the sum of all the coordinates, with either xshow=:sum, or the Euclidian norm, if xshow=:norm, or in any other way if xshow is a Function acting on each element of x, when x is a scalar, or on each column of x, when x is vector-valued, such as xshow=sqrt, xshow=sum or xshow=x->2x[1] + x[2]/2, etc.).\n\nSimilary, if noise is a ProductProcess, onde can choose to display one or more specific noise contituents, or combinations of them, by specifying the keyword yshow in the same way as for xshow just described.\n\nThe resolution keyword can be used to set the maximum resolution for the display of paths, which can be originally about a million points, so reducing it to say the default value of 2^9=512 is plenty enough for the visualization and reduces considerably the size of the generated SVG images. When combining multiple plots into one, it helps reducing even more this value, say resolution=2^7 or 2^8 (128 or 256 points). The resolution must be a factor of suite.ntgt and of all the values of suite.ns.\n\n\n\n\n\n","category":"function"},{"location":"api/#Extras","page":"API","title":"Extras","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AbstractProcess","category":"page"},{"location":"api/#RODEConvergence.AbstractProcess","page":"API","title":"RODEConvergence.AbstractProcess","text":"AbstractProcess{T, N}\n\nAbstract super type for every noise process, with parameter N being either Univariate or Multivariate and T being the eltype of the process.\n\nThe following aliases are also defined:\n\nUnivariateProcess{T} = AbstractProcess{T, Univariate}\nMultivariateProcess{T} = AbstractProcess{T, Multivariate}\n\nThe parameter types are borrowed from Distributions.Univariate and Distributions.Multivariate.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.RODEMethod","category":"page"},{"location":"api/#RODEConvergence.RODEMethod","page":"API","title":"RODEConvergence.RODEMethod","text":"RODEMethod{N}\n\nAbstract supertype for the methods for solving a Random ODE.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.solve!","category":"page"},{"location":"api/#RODEConvergence.solve!","page":"API","title":"RODEConvergence.solve!","text":"solve!(xt, t0, tf, x0, f, yt, method)\n\nSolve a random ODE with the provided method.\n\nMore precisely, sove, inplace, (a sample path of) the (R)ODE dx_t/dt = f(t, x_t, y_t), for an unknown x_t and a given (noise path) y_t, with the following arguments:\n\na function f(t, x, y), if x is a scalar, or f(dx, t, x, y), if x is a vector;\na scalar or vector initial condition x0;\na time interval t0 to tf;\na sample path yt of a \"noise\", either a vector (for scalar noise) or a matrix (for vectorial noise).\na numerical method, either RandomEuler() for a scalar equation, RandomEuler(n) for an n-dimensional system of equations, or RandomHeun() for a scalar equation.\n\nThe values of xt are updated with the computed solution values.\n\nThe time step is obtained from the length n of the vector xt via dt = (tf - t0) / (n - 1).\n\nThe noise yt should be of the same (row) length as xt.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"RODEConvergence.calculate_trajerrors!","category":"page"},{"location":"api/#RODEConvergence.calculate_trajerrors!","page":"API","title":"RODEConvergence.calculate_trajerrors!","text":"calculate_trajerrors!(rng, trajerrors, suite)\n\nCalculate the strong error at each time step along the trajectory.\n\n\n\n\n\n","category":"function"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/03-sin_gBm_linearhomogeneous.jl\"","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Homogenous-linear-RODE-with-the-sine-of-a-Geometric-Brownian-motion-coefficient","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"This time we take, as the coefficient of a homogeneous linear equation, the sine of a Geometric Brownian motion process. This is a multiplicative noise, so the classical theory yields a strong order 1/2 convergence for the Euler method, but our results show the strong convergence is actually of order 1, which is, in fact, achieved in the simulations that follow.","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#The-equation","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"The equation","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"We consider the RODE","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = sin(Y_t) X_t qquad 0 leq t leq T \n  left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"where Y_t_tgeq 0 is a geometric Brownian motion process. The explicit solution is","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"  X_t = e^int_0^t sin(Y_s) mathrmds X_0","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Computing-a-higher-order-approximation-of-the-solution","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Computing a higher order approximation of the solution","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"As in the previous examples, the integral int_0^t_j sin(Y_s)mathrmds and, hence, the exact solution, is not uniquely defined from the values W_t_j of the noise on the mesh points. This time, an exact distribution for the collection of exact solutions conditioned on the mesh points is not available in closed form. Hence, we consider an approximation of an exact solution by solving the equation numerically, with the Euler method itself, but in a much higher resolution.","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"Indeed, the convergence will be estimated from a set of discretizations with mesh points with time step Delta t_N = (t_f - t_0)  2^N, for N = N_1  N_2  ldots N_n, for some nin mathbbN, by comparing the error of such solutions to an approximated solutions computed in a finer mesh with Delta t_textrmfine = Delta t_N_n^2, hence with N_textrmfine = N_n^2.","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Numerical-approximation","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Setting-up-the-problem","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"First we load the necessary packages","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"using Plots\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"Then we set up some parameters, with a Distributions.Normal random variable as the initial condition.","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"rng = Xoshiro(123)\n\nf(t, x, y) = sin(y) * x\n\nt0, tf = 0.0, 1.0\nx0law = Normal()","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"The geometric Brownian motion noise is defined via GeometricBrownianMotionProcess, with initial value y_0, drift mu, and dissipation sigma as given by","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"μ = 1.0\nσ = 0.2\ny0 = 1.0\nnoise = GeometricBrownianMotionProcess(t0, tf, y0, μ, σ)","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"The mesh parameters are","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"ntgt = 2^18\nns = 2 .^ (4:9)\nnsample = ns[[1, 2, 3, 4]]\nm = 200","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"We add some information about the simulation:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"info = (\n    equation = \"\\$\\\\mathrm{d}X_t/\\\\mathrm{d}t = \\\\sin(Y_t) X_t\\$\",\n    noise = \"a geometric Brownian motion process noise \\$\\\\{Y_t\\\\}_t\\$ (ic=$y0, drift=$μ; diffusion=$σ)\",\n    ic = \"\\$X_0 \\\\sim \\\\mathcal{N}(0, 1)\\$\"\n)","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"We define the target solution as the approximation obtained by the Euler method in the much higher resolution ntgt of mesh points. The approximations are also obtained via the Euler method, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"target = RandomEuler()\nmethod = RandomEuler()","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Order-of-convergence","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Order of convergence","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/#Plots","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Plots","text":"","category":"section"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"We illustrate the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"plt = plot(result)","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/order_sin_gBm_linearhomogenous.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"For the sake of illustration, we plot some approximations of a sample target solution:","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"plot(suite, ns=nsample)","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"We can also visualize the noise associated with this sample solution,","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"plot(suite, xshow=false, yshow=true, label=\"gBm noise\")","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"and the sine of the noise, which is the coefficient of he equation","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"plot(suite, xshow=false, yshow=sin, label=\"sin of gBm noise\")","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"","category":"page"},{"location":"examples/03-sin_gBm_linearhomogeneous/","page":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","title":"Homogenous linear RODE with the sine of a Geometric Brownian motion coefficient","text":"This page was generated using Literate.jl.","category":"page"},{"location":"theory/idea/#Main-idea","page":"Main idea","title":"Main idea","text":"","category":"section"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The improvement in the convergence estimates relies on a novel approach with four main points:","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"Estimate the accumulated global error instead of the local error;\nWrite the global error as an iterated integral over the large and the small mesh scales;\nUse Fubini Theorem to switch the order of integration, moving the critical regularity from the small to the large scale;\nAssume either a control of the total variation of the sample paths of the noise (as in many point processes and transport process) or use the Itô isometry (when the noise is an It\\^o process, such as Wiener, Ornstein-Uhlenbeck, and Geometric Brownian motion processes) in order to bound the large scale.","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"Let us go over them with more details.","category":"page"},{"location":"theory/idea/#The-first-main-idea:-consider-a-global-error","page":"Main idea","title":"The first main idea: consider a global error","text":"","category":"section"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The first main idea of the proof is to not estimate the local error and, instead, work with an explicit formula for the global error, namely","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"beginalign*\n    X_t_j - X_t_j^N  = X_0 - X_0^N \n     qquad + int_0^t_j left( f(s X_s Y_s) - f(s X_tau^N(s) Y_s) right)mathrmds   \n     qquad + int_0^t_j left( f(s X_tau^N(s) Y_s) - f(s X_tau^N(s)^N Y_s) right)mathrmds \n     qquad + int_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmds\nendalign*","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"for j = 1 ldots N where tau^N is a piecewise constant function with jumps at the mesh points t_j, given by","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"tau^N(t) = max_jjDelta t_N  jDelta t_N leq t = leftfractDelta t_NrightDelta t_N = leftfractNTrightfracTN","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"Assuming that f=f(t x y) is uniformly globally Lipschitz continous in x, with Lipschitz constant L_xgeq 0, the first two integrals can be handled in such a way that we obtain the following basic bound for the global error","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"beginalign*\n    X_t_j - X_t_j^N  leq left( X_0 - X_0^N + L_X int_0^t_j X_s - X_tau^N(s) mathrmds right \n     qquad left leftint_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmdsrightright) e^L_X t_j\nendalign*","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The first term vanishes due to the initial condition X_0^N = X_0. The second term only depends on the solution and can be easily estimated to be of order Delta t_N under natural regularity conditions on the term f=f(t x y). The only problematic, noise-sensitive term is the last one. The classical analysis is to use an assumed theta-Hölder regularity of the noise sample paths and estimate the local error as","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    mathbbEleftleftf(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s))rightright leq CDelta t^theta","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"Instead, we estimate the global error.","category":"page"},{"location":"theory/idea/#Second-main-idea:-global-error-in-the-form-of-an-iterated-integral","page":"Main idea","title":"Second main idea: global error in the form of an iterated integral","text":"","category":"section"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The second main idea is to consider the whole global error and assume that the steps of the process given by F_t = f(t X_tau^N(t)^N Y_t) can be controlled in a suitable way, in the form of an integral of some sort:","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    F_s - F_tau = int_tau^s mathrmdF_xi","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"This can be either in the sense of a Riemann-Stieltjes integral or of an Itô integral. The first sense fits the case of noises with bounded total variation, while the second one fits the case of an Itô noise. In this way, we write the global error as an iterated integral:","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    int_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmds = int_0^t_j int_tau^N(s)^s mathrmd  F_ximathrmds","category":"page"},{"location":"theory/idea/#Third-main-idea:-use-Fubini-to-change-the-critical-regularity-to-the-large-scale","page":"Main idea","title":"Third main idea: use Fubini to change the critical regularity to the large scale","text":"","category":"section"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The third main idea is to use Fubini's Theorem to switch the order of integration, making the lower regularity (acting on the variable xi) vary on the larger scale (on the interval 0 t_j) instead of on the small scale of the time-step (on tau^N(s) s). In this way, we obtain","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"beginalign*\n    int_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmds  = int_0^t_j int_tau^N(s)^s mathrmd  F_ximathrmds \n     = int_0^t_j int_xi^tau^N(xi) + Delta t_N mathrmds mathrmd F_xi \n     = int_0^t_j (tau^N(xi) + Delta t_N - xi) mathrmd F_xi\nendalign*","category":"page"},{"location":"theory/idea/#Fourth-idea:-exploit-the-noise-to-estimate-the-error-in-the-global-scale","page":"Main idea","title":"Fourth idea: exploit the noise to estimate the error in the global scale","text":"","category":"section"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The final, fourth idea is to assume some global estimate to bound","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    mathbbEleftleft int_0^t_j left( f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) right)mathrmdsrightright leq Delta t_N mathbbEleftint_0^t_j mathrmd F_xiright leq C Delta t_N","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"which yields the strong order 1 convergence provided the remaining expectation is finite. The way this is done depends on the noise.","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"In the case of an Itô noise, we have something like","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"mathrmd F_xi = A_tmathrmdt + B_tmathrmdW_t","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"for suitable processes A_t_t and B_t_t, and then we use the Itô isometry and suitable global assumptions on f=f(t x y) in order to bound","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"mathbbEleftint_0^t_j mathrmd F_xiright leq int_0^TmathbbEleftA_tright mathrmdt + left( int_0^TmathbbEleftB_t^2right mathrmdtright)^12  infty","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"In the case of noises with sample paths of bounded variation, we can relax the above condition and work not with F_t_tin I itself but with a bound on the step of the form","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    f(s X_tau^N(s)^N Y_s) - f(tau^N(s) X_tau^N(s)^N Y_tau^N(s)) leq bar F_s - bar F_tau^N(s)","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"Only this bounding process bar F_t_tin I is required to have sample paths of bounded variation, which is usually easier to check, and so that","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"mathbbEleftint_0^t_j mathrmd F_xiright leq mathbbEleftV(F_xi 0 T)rightinfty","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"The case of fractional Brownian motion is more delicate, but follows a similar idea, except the sample paths satisfy","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"    F_s - F_tau = int_tau^s (s - xi)^H-12mathrmdF_xi + mathcalO(Delta t_N)","category":"page"},{"location":"theory/idea/","page":"Main idea","title":"Main idea","text":"which eventually leads to Delta t_N^H + 12 order, for 0  H  12","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/05-fBm_linear.jl\"","category":"page"},{"location":"examples/05-fBm_linear/#Linear-RODE-with-fractional-Brownian-motion","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"","category":"section"},{"location":"examples/05-fBm_linear/#The-equation","page":"Linear RODE with fractional Brownian motion","title":"The equation","text":"","category":"section"},{"location":"examples/05-fBm_linear/#Numerical-approximation","page":"Linear RODE with fractional Brownian motion","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/05-fBm_linear/#Setting-up-the-problem","page":"Linear RODE with fractional Brownian motion","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"First we load the necessary packages","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"using Plots\nusing Random\nusing LinearAlgebra\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"Then we set up some variables:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"rng = Xoshiro(123)\n\nf(t, x, y) = - x + y\n\nt0 = 0.0\ntf = 1.0\n\nx0law = Normal()\n\nntgt = 2^18\nns = 2 .^ (6:9)\nnsample = ns[[1, 2, 3, 4]]\nm = 200\n\ny0 = 0.0\nhursts = Iterators.flatten((0.1:0.1:0.5, 0.7:0.2:0.9))\nnoise = FractionalBrownianMotionProcess(t0, tf, y0, first(hursts), ntgt)","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"And add some information about the simulation:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"info = (\n    equation = \"\\$\\\\mathrm{d}X_t/\\\\mathrm{d}t = -X_t + B^H_t\\$\",\n    noise = \"fBm noise\",\n    ic = \"\\$X_0 \\\\sim \\\\mathcal{N}(0, 1)\\$\"\n)","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"target = RandomEuler()\nmethod = RandomEuler()","category":"page"},{"location":"examples/05-fBm_linear/#Order-of-convergence","page":"Linear RODE with fractional Brownian motion","title":"Order of convergence","text":"","category":"section"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"With all the parameters set up, we build the convergence suite:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"allctd = @allocated suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)\n\npwr = Int(div(round(log10(allctd)), 3)) # approximate since Kb = 1024 bytes not 1000 and so on\n@info \"`suite` memory: $(round(allctd / 10^(3pwr), digits=2)) $((\"bytes\", \"Kb\", \"Mb\", \"Gb\", \"Tb\")[pwr+1])\"","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"Then we are ready to compute the errors:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/05-fBm_linear/#Plots","page":"Linear RODE with fractional Brownian motion","title":"Plots","text":"","category":"section"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"We create a plot with the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"plot(result)","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"For the sake of illustration, we plot a sample of an approximation of a target solution:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"plot(suite, ns=nsample)","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"We can also visualize the noise:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"plot(suite, xshow=false, yshow=true)","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"We save the order of convergence obtained","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"ps = [result.p]\npmins = [result.pmin]\npmaxs = [result.pmax]","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"nothing","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"Now we vary the Hurst parameter and record the corresponding order of convergence.","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"@info \"h = $(first(hursts)); p = $(result.p)\"\n\nfor h in Iterators.drop(hursts, 1)\n    loc_noise = FractionalBrownianMotionProcess(t0, tf, y0, h, ntgt)\n    loc_suite = ConvergenceSuite(t0, tf, x0law, f, loc_noise, target, method, ntgt, ns, m)\n    @time loc_result = solve(rng, loc_suite)\n    @info \"h = $h => p = $(loc_result.p) ($(loc_result.pmin), $(loc_result.pmax))\"\n    push!(ps, loc_result.p)\n    push!(pmins, loc_result.pmin)\n    push!(pmaxs, loc_result.pmax)\nend","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"We print them out for inclusing in the paper:","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"[collect(hursts) ps pmins pmaxs]","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"The following plot helps visualizing the result.","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"plt = plot(ylims=(-0.1, 1.2), xaxis=\"H\", yaxis=\"p\", guidefont=10)\nscatter!(plt, collect(hursts), ps, yerror=(ps .- pmins, pmaxs .- ps), label=\"computed\")\nplot!(plt, 0.0:0.01:1.0, p -> min(p + 0.5, 1.0), linestyle=:dash, label=\"expected\")","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"Strong order p of convergence of the Euler method for mathrmdX_tmathrmdt = - Y_t^H X_t with a fractional Brownian motion process Y_t^H_t for various values of the Hurst parameter H (scattered dots: computed values; dashed line: expected p = H + 12).","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"order_dep_on_H_fBm.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"","category":"page"},{"location":"examples/05-fBm_linear/","page":"Linear RODE with fractional Brownian motion","title":"Linear RODE with fractional Brownian motion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/02-wiener_linearnonhomogeneous.jl\"","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#Non-homogenous-linear-RODE-with-a-Wiener-process-noise-coefficient","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"In our second linear example, a Wiener process noise enters as the non-homogeneous term.","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#The-equation","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"The equation","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"More precisely, we consider the RODE","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = - X_t + W_t qquad 0 leq t leq T \n  left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"where W_t_tgeq 0 is a Wiener process. The explicit solution is","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  X_t = e^-tX_0 + int_0^t e^-(t-s)W_smathrmds","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#Computing-a-solution-with-the-exact-distribution","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Computing a solution with the exact distribution","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"As in the first example, the integral int_0^t_j e^s W_smathrmds and, hence, the exact solution, is not uniquely defined from the values W_t_j of the noise on the mesh points, no matter how fine it is. Thus we estimate the strong error by drawing sample solutions with the exact distribution conditioned on the mesh values.","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"We do that by first breaking down the sum into parts:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"int_0^t_j e^s W_smathrmds = sum_i = 0^j-1 int_t_i^t_i+1 e^s W_smathrmds","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"On each mesh interval, we consider again the Brownian bridge","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  B_t = W_t - W_t_i - fract - t_it_i+1-t_i(W_t_i+1 - W_t_i)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"on t_i t_i+1, which is independent of W_t_i and W_t_i+1.","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Then,","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  beginalign*\n      int_t_i^t_i+1 e^s W_smathrmds  = int_t_i^t_i+1 e^s B_s^imathrmds + int_t_i^t_i+1 e^sleft( W_t_i + fracs - t_it_i+1-t_i(W_t_i+1 - W_t_i)right)mathrmds \n       = W_t_i+1e^t_i+1 - W_t_ie^t_i - fracW_t_i+1-W_t_it_i+1-t_ileft(e^t_i+1-e^t_iright) + Z_i\n  endalign*","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"where","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"    Z_i = int_t_i^t_i+1 e^s B_s^imathrmds","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"As before, the term Z_i is a Gaussian with zero mean, and we need to compute its variance to completely characterize it. By translation, it suffices to consider a Brownian bridge B_t_tin 0 tau on an interval 0 tau, with tau = Delta t_N. This is obtained from B_t = W_t - (ttau)W_tau. We have, since mathbbEW_tW_s = mint s, that","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"   mathbbEB_tB_s = mint s - fractstau","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Hence,","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"      beginalign*\n      mathbbEleftleft(int_0^tau e^s B_smathrmdsright)^2right  = mathbbEleftint_0^tau int_0^tau e^s e^t B_sB_tmathrmdsmathrmdright \n       = int_0^tau int_0^tau e^s e^t mathbbEB_sB_t mathrmdsmathrmdt \n       = int_0^tau int_0^tau e^s e^tleft(mint s - fractstauright) mathrmdsmathrmdt \n       = int_0^tau int_0^t e^s e^t smathrmdsmathrmdt + int_0^tau int_t^tau e^s e^t tmathrmdsmathrmdt - int_0^tau int_0^tau e^s e^t fractstau mathrmdsmathrmdt \n       = int_0^tau e^t(te^t-e^t+1)mathrmdt + int_0^tau te^t(e^tau - e^t)mathrmdt \n       qquad - int_0^tau fracte^ttauleft(tau e^tau - e^tau + 1right)mathrmdt \n       = fractau^312\n  endalign*","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Back to Z_i, this means that","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"     Z_i sim mathcalNleft(0 frac(t_i+1- t_i)^312right) = fracsqrt(t_i+1 - t_i)^3sqrt12mathcalN(0 1)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Summing up the terms, we find that","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  beginalign*\n      int_0^t_j e^s W_smathrmds  = sum_i = 0^j-1 int_t_i^t_i+1 e^s W_smathrmds \n       = sum_i = 0^j-1 left( W_t_i+1e^t_i+1 - W_t_ie^t_i - fracW_t_i+1-W_t_it_i+1-t_ileft(e^t_i+1-e^t_iright) + Z_iright) \n       = W_t_je^t_j - sum_i = 0^j-1 left( fracW_t_i+1-W_t_it_i+1-t_ileft(e^t_i+1-e^t_iright) + Z_iright)\n  endalign*","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Thus, once an Euler approximation is computed, along with realizations W_t_i_i=0^n of a sample path of the noise, we consider an exact sample solution given by","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  X_t_j = e^-t_jleft(X_0 - sum_i=0^j-1 left(fracW_t_i+1 - W_t_it_i+1-t_ileft(e^t_i+1 - e^t_iright) + Z_iright)right) + W_t_j","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"for realizations Z_i drawn from a normal distribution and scaled by the standard deviation sqrt(t_i+1 - t_i)^312. This is implemented by computing the integral recursively, via","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"    begincases\n        I_j = I_j-1 + fracW_t_j-1 + W_t_jt_j - t_j-1left(e^t_j - e^t_j-1right) - Z_j \n        Z_j = sqrtfrac(t_j - t_j-1)^312 R_j \n        R_j sim mathcalN(0 1) \n    endcases","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"with I_0 = 0, and setting","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"  X_t_j = e^t_jleft(X_0 - I_jright) + W_t_j","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#Numerical-approximation","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/#Setting-up-the-problem","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"We load the necessary packages","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"using Plots\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Then we set up the relevant variables, as in the first example:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"rng = Xoshiro(123)\n\nf(t, x, y) = - x + y\n\nt0, tf = 0.0, 1.0\nx0law = Normal()\n\ny0 = 0.0\nnoise = WienerProcess(t0, tf, y0)\n\nntgt = 2^16\nns = 2 .^ (4:14)\nnsample = ns[[1, 2, 3, 4]]\nm = 100\n\ninfo = (\n    equation = \"\\$\\\\mathrm{d}X_t/\\\\mathrm{d}t = -X_t + W_t\\$\",\n    noise = \"a standard Wiener process noise \\$\\\\{W_t\\\\}_t\\$\",\n    ic = \"\\$X_0 \\\\sim \\\\mathcal{N}(0, 1)\\$\"\n)\nnothing # hide","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"We define the target solution as described above.","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"target_solver! = function (xt::Vector{T}, t0::T, tf::T, x0::T, f::F, yt::Vector{T}, rng::AbstractRNG) where {T, F}\n    axes(xt) == axes(yt) || throw(\n        DimensionMismatch(\"The vectors `xt` and `yt` must match indices\")\n    )\n\n    n = size(xt, 1)\n    dt = (tf - t0) / (n - 1)\n    i1 = firstindex(xt)\n    xt[i1] = x0\n    integral = zero(T)\n    ti1 = zero(T)\n    zscale = sqrt(dt^3 / 12)\n    for i in Iterators.drop(eachindex(xt, yt), 1)\n        ti = ti1 + dt\n        integral += (yt[i] - yt[i1]) * (exp(ti) - exp(ti1)) / dt +  zscale * randn(rng)\n        xt[i] = exp(-ti) * (x0 - integral) + yt[i]\n        ti1 = ti\n        i1 = i\n    end\nend","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"and with that we construct the CustomMethod that solves the problem with this target_solver!:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"target = CustomUnivariateMethod(target_solver!, rng)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"The method for which want to estimate the rate of convergence is, naturally, the Euler method, implemented via RandomEuler:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"method = RandomEuler()","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#Order-of-convergence","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Order of convergence","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/#Plots","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Plots","text":"","category":"section"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"We draw a plot of the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"plt = plot(result)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/order_wiener_linearnonhomogenous.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"For the sake of illustration, we plot an approximation of a sample target solution:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"plot(suite, ns=nsample)","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"We can also visualize the noise associated with this sample solution:","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"plot(suite, xshow=false, yshow=true, label=\"Wiener noise\")","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"","category":"page"},{"location":"examples/02-wiener_linearnonhomogeneous/","page":"Non-homogenous linear RODE with a Wiener process noise coefficient","title":"Non-homogenous linear RODE with a Wiener process noise coefficient","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/06-popdyn.jl\"","category":"page"},{"location":"examples/06-popdyn/#Population-dynamics-with-sin-of-gBm-growth-and-step-process-harvest","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"","category":"section"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"This time we consider a population dynamics model with two types of noise, a geometric Brownian motion process affecting the growth rate and a point Poisson step process affecting the harvest.","category":"page"},{"location":"examples/06-popdyn/#The-equation","page":"Population dynamics with sin of gBm growth and step process harvest","title":"The equation","text":"","category":"section"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"More precisely, we consider the RODE","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = Lambda_t X_t (r - X_t) - alpha H_tfrac2X_tr + X_t qquad 0 leq t leq T \n  left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"with","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"  Lambda_t = lambda(1 + epsilonsin(G_t))","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"where G_t_tgeq 0 is a geometric Brownian motion process and H_t_t geq 0 is a point Poisson step process with Beta-distributed steps.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We fix lambda = 10, epsilon = 03, r = 10, and alpha = 05. Notice the critical value for the bifurcation oscilates between lambda (1 - epsilon)  4 and lambda (1 + epsilon)  4, while the harvest term oscillates between 0 and alpha, and we choose alpha = lambda  2 so it oscillates below and above the critical value.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We choose a Beta distribution as the step law, with mean a little below 12, so it stays mostly below the critical value, but often above it.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The geometric Brownian motion process is chosen with drift mu = 1, diffusion sigma = 08 and initial value y_0 = 10.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The Poisson counter for the point Poisson step process is chosen with rate 15.0, while the time interval is chosen with unit time span.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"As for the initial condition, we also choose a Beta distribution, so it stays within the growth region, and with the same parameters as for the steps, just for the sake of simplicity.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We do not have an explicit solution for the equation so we use as target for the convergence an approximate solution via Euler method at a much higher resolution.","category":"page"},{"location":"examples/06-popdyn/#Numerical-approximation","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/06-popdyn/#Setting-up-the-problem","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"First we load the necessary packages","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"using Plots\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"Then we set up the problem parameters.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We set the seed:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The right hand side of the evolution equation:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"function f(t, x, y)\n    γ = 0.8\n    ϵ = 0.3\n    r = 1.0\n    α = γ * r^2\n    dx = x > zero(x) ? γ * (1 + ϵ * sin(y[1])) * x * (1 - x / r) - α * y[2] * x / (r + x) : zero(x)\n    return dx\nend","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The time interval:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"t0, tf = 0.0, 1.0","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The law for the initial condition:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"x0law = Beta(7.0, 5.0)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The noise parameters:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"μ = 1.0\nσ = 0.8\ny0 = 1.0\nnoise1 = GeometricBrownianMotionProcess(t0, tf, y0, μ, σ)\n\nλ = 15.0\nsteplaw = Beta(5.0, 7.0)\nnoise2 = PoissonStepProcess(t0, tf, λ, steplaw)\n\nnoise = ProductProcess(noise1, noise2)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The mesh resolution:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"ntgt = 2^18\nns = 2 .^ (4:9)\nnsample = ns[[1, 2, 3, 4]]","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The number of samples for the Monte-Carlo estimate:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"m = 200","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"And add some information about the simulation:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"info = (\n    equation = \"population dynamics\",\n    noise = \"gBm and step process noises\",\n    ic = \"\\$X_0 \\\\sim \\\\mathrm{Beta}($(x0law.α), $(x0law.β))\\$\"\n)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"target = RandomEuler()\nmethod = RandomEuler()","category":"page"},{"location":"examples/06-popdyn/#Order-of-convergence","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Order of convergence","text":"","category":"section"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/06-popdyn/#Plots","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Plots","text":"","category":"section"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We illustrate the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plt = plot(result)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"order_popdyn_gBmPoisson.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"For the sake of illustration, we plot some approximations of a sample target solution:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plt = plot(suite, ns=nsample)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"sample_popdyn_gBmPoisson.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"We can also visualize the noises associated with this sample solution:","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plot(suite, xshow=false, yshow=true, label=[\"Z_t\" \"H_t\"], linecolor=:auto)","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"The gBm noises enters the equation via G_t = gamma(1 + epsilonsin(Z_t)). Using the chosen parameters, this noise can be visualized below","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"plot(suite, xshow=false, yshow= y -> 0.8 + 0.3sin(y[1]), label=\"\\$G_t\\$\")","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"","category":"page"},{"location":"examples/06-popdyn/","page":"Population dynamics with sin of gBm growth and step process harvest","title":"Population dynamics with sin of gBm growth and step process harvest","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/08-earthquake.jl\"","category":"page"},{"location":"examples/08-earthquake/#Mechanical-structural-under-random-Earthquake-like-seismic-disturbances","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"","category":"section"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Now we consider a mechanical structure problem under ground-shaking Earthquake-like excitations. The problem is modeled by a second-order Random ODE driven by a random disturbance in the form of a transport process. The equation is inspired by the model in Bogdanoff, Goldberg & Bernard (1961) (see also [Chapter 18]{NeckelRupp2013} and {HousnerJenning1964} with this and other models).","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"There are a number of models for earthquake-type forcing, such as the ubiquotous Kanai-Tajimi and Clough-Penzien models, where the noise has a characteristic spectral density, determined by the mechanical properties of the ground layer. The ideia, from {Kanai1957}, is that the spectrum of the noise at bedrock is characterized by a constant pattern, while at the ground surface it is modified by the vibration property of the ground layer. This interaction between the bedrock and the ground layer is modeled as a stochastic oscillator driven by a zero-mean Gaussian white noise, and whose solution leads to a noise with a characteristic power spectrum.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Another important aspect concerns the fact that the aftershocks tend to come in clusters, with the ocurrence of an event increasing the chances for subsequent events. As such, self-exciting intensity processes have been successful in modeling the arrival times of the aftershocks (see e.g. Pratiwi, Slamet, Saputro & Respatiwulan (2017)). The decaying kernel is usually an inverse power law, starting with the celebrated Omori formula T. Utsu, Y. Ogata & R. S. Matsu'ura, The centenary of the Omori formula for a decay law of aftershock activity, Journal of Physics of the Earth, Volume 43 (1995), no. 1, 1-33). Exponentially decaying kernels are also used and, in this case, leads to a noise in the form of an exponentially decaying self-excited Hawkes process. The intensity, or rate, of this inhomogenous Poisson point process, for the interarrival times, is not directly related to the magnitude of the aftershocks, so this process should be coupled with another process for the magnitude of each shock.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We follow, however, the Bogdanoff-Goldberg-Bernard model, which takes the form of a transport process noise. We chose the later so we can illustrate the improved convergence for such type of noise, complementing the other examples. This model is described in more details shortly. Let us introduce first the model for the vibrations of the mechanical structure.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"A single-storey building is considered, with its ground floor centered at position M_t and its ceiling at position M_t + X_t. The random process X_t refers to the motion relative to the ground. The ground motion M_t affects the motion of the relative displacement X_t as an excitation force proportional to the ground acceleration ddot M_t. The damping and elastic forces are in effect within the structure. In this framework, the equation of motion for the relative displacement X_t of the ceiling of the single storey building takes the following form.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"  ddot X_t + 2zeta_0omega_0dot X_t + omega_0^2 X_t = - ddot M_t","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where zeta_0 and omega_0 are damping and elastic model parameters depending on the structure.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"For the numerical simulations, the second-order equation is written as a system of first-order equations:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"  begincases\n      dot X_t = V_t \n      dot V_t = - omega_0^2 X_t - 2zeta_0omega_0 X_t - Y_t\n  endcases","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where V_t_t is the random velocity of the celing relative to the ground and where Y_t_t is the stochastic noise excitation term given as the ground acceleration, Y_t = ddot M_t, generated by an Earthquake and its aftershocks, or any other type of ground motion.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The structure is originally at rest, so we have the initial conditions","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"X_0 = 0 quad V_0 = dot X_0 = 0","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"In the Bogdanoff-Goldberg-Bernard model \\cite{BogdanoffGoldbergBernard1961}, the excitation ddot M_t is made of a composition of oscillating signals a_j t e^-delta_j tcos(omega_j t + theta_j) with random frequencies omega_j, modulated by a linear attack rate a_j t followed by an exponential decay e^-delta_j t.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"In order to simulate the start of the first shock-wave and the subsequent aftershocks, we modify this model sligthly to be a combination of such terms but at different incidence times. We also remove the attack rate from the excitation to obtain a rougher instantaneous, discontinuous excitation, which is connected with a square power attact rate for the displacement itself. Finally, for simulation purposes, we model directly the displacement M_t and compute the associated excitation ddot M_t, but in such a way that the ground-motion excitation follows essentially the proposed type of signal.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Thus, with this framework in mind, we model the ground displacement as a transport process composed of a series of time-translations of a square-power ``attack\" front, with an exponentially decaying tail and an oscillating background wave:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"   M_t = sum_i=1^k gamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i))","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where kin mathbbN is given, (t-tau_i)_+ = max0 t - tau_i is the positive part of the function, and the parameters gamma_i tau_i delta_i and omega_i are all random variables, with tau_i being exponentially distributed, and gamma_i, delta_i, and omega_i being uniformly distributed, each with different support values, and all of them independent of each other.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The excitation itself becomes","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"beginalign*\n   ddot M(t) =  2sum_i=1^kgamma_i H(t - tau_i) e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n        + sum_i=1^kgamma_i (delta_i^2 - omega_i^2)(t - tau_i)_+^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n        -2sum_i=1^kgamma_i (delta_i + omega_i) (t - tau_i)_+ e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n        +delta_isum_i=1^komega_igamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)sin(omega_i (t - tau_i))\nendalign*","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where H = H(s) is the Heaviside function, where, for definiteness, we set H(s) = 1 for s geq 1 and H(s) = 0, for s  0.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"More specifically, for the numerical simulations, we use zeta_0 = 06 and omega_0 = 15textttradtexttts as the structural parameters. We set T = 20 as the final time. For the transport process, we set k=12 and define the random parameters as tau_i sim textrmExponential(025) gamma_i sim textrmUnif(00 40) delta_i sim textrmUnif(80 120) and omega_i sim textrmUnif(8pi 32pi)","category":"page"},{"location":"examples/08-earthquake/#Numerical-approximation","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/08-earthquake/#Setting-up-the-problem","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"First we load the necessary packages:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"using Plots\nusing Random\nusing LinearAlgebra\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Then we set up some variables, starting with the random seed, for reproducibility of the pseudo-random number sequence generator:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We define the evolution law for the displacement X_t driven by a noise Y_t. Since it is a system of equations, we use the in-place formulation. Notice the noise is a product of the background colored noise y[1] and the envelope noise y[2]. The parameters are hard-coded for simplicity.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"function f!(dx, t, x, y)\n    ζ₀ = 0.6\n    ω₀ = 15\n    dx[1] = x[2]\n    dx[2] = - 2 * ζ₀ * ω₀ * x[2] - ω₀ ^ 2 * x[1] - y\n    return dx\nend","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The time interval is defined by the following end points:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"t0, tf = 0.0, 2.0","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The structure is initially at rest, so the probability law is a vectorial product of two Dirac delta distributions, in mathbbR^2:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"x0law = product_distribution(Dirac(0.0), Dirac(0.0))","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"As described above, we assume the ground motion is an additive combination of translated exponentially decaying wavefronts of the form","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"  m_i(t) = gamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i))","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where (t - tau_i)_+ = max0 t - tau_i, i.e. it vanishes for t leq tau_i and is simply (t - tau_i) for tgeq tau_i. The associated noise is a combination of the second derivatives ddot m_i(t), which has jump discontinuities. Indeed, we have the ground velocities","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"  beginalign*\n  dot m_i(t) =  2gamma_i (t - tau_i)_+ e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       -delta_igamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       -omega_igamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)sin(omega_i (t - tau_i))\n  endalign*","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"and the ground accelerations","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"  beginalign*\n  ddot m_i(t) =  2gamma_i H(t - tau_i) e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       + delta_i^2gamma_i (t - tau_i)^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       -omega_i^2gamma_i (t - tau_i)^2 e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       -2delta_igamma_i (t - tau_i)_+ e^-delta_i (t - tau_i)cos(omega_i (t - tau_i)) \n       -2omega_igamma_i (t - tau_i)_+ e^-delta_i (t - tau_i)sin(omega_i (t - tau_i)) \n       +delta_iomega_igamma_i (t - tau_i)_+^2 e^-delta_i (t - tau_i)sin(omega_i (t - tau_i))\n  endalign*","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"where H=H(s) is the Heaviside function, where, for definiteness, we set H(s) = 1 for s geq 1 and H(s) = 0, for s  0.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We implement these functions as","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"function gm(t::T, t0::T, γ::T, α::T, ω::T) where {T}\n    tshift = max(zero(T), t - t0)\n    m = γ * tshift ^2 * exp( -α * tshift ) * cos( ω * tshift )\n    return m\nend\n\nfunction dgm(t::T, τ::T, γ::T, δ::T, ω::T) where {T}\n    t₊ = max(zero(T), t - τ)\n    t₊² = t₊ ^ 2\n    expδt₊ = exp( -δ * t₊ )\n    sinωt₊, cosωt₊ = sincos(ω * t₊)\n    ṁ = γ * ( ( 2t₊ + δ * τ² ) * cosωt₊ - ω * t₊²  * sinωt₊ ) * expδt₊\n    return ṁ\nend\n\nfunction ddgm(t::T, τ::T, γ::T, δ::T, ω::T) where {T}\n    h = convert(T, t ≥ τ)\n    t₊ = ( t - τ ) * h\n    t₊² = t₊ ^ 2\n    expδt₊ = exp( -δ * t₊ )\n    sinωt₊, cosωt₊ = sincos(ω * t₊)\n    m̈ = γ * ( ( 2h + ( δ^2 - ω^2 ) * t₊² - 2δ * t₊) * cosωt₊ + ( -2ω * t₊ + δ * ω * t₊² ) * sinωt₊ ) * expδt₊\n    return m̈\nend","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"ylaw = product_distribution(Exponential(tf/8), Uniform(0.0, 4.0), Uniform(8.0, 12.0), Uniform(8π, 32π))\nnr = 12\ng(t, r) = mapreduce(ri -> ddgm(t, ri[1], ri[2], ri[3], ri[4]), +,  eachcol(r))\nnoise = TransportProcess(t0, tf, ylaw, g, nr)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"n = 2^12\ntt = range(t0, tf, length=n)\nyt = Vector{Float64}(undef, n)\nrand!(rng, noise, yt)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Ground motion m_t:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"mt = [mapreduce(ri -> gm(t, ri[1], ri[2], ri[3], ri[4]), +,  eachcol(noise.rv)) for t in range(t0, tf, length=length(yt))]\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Envelope of ground excitation","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"et = [mapreduce(ri -> ddgm(t, ri[1], ri[2], ri[3], 0.0), +,  eachcol(noise.rv)) for t in range(t0, tf, length=length(yt))]\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Visualization","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"plt1 = plot(tt, mt, label=\"ground motion\")\nplt2 = plot(tt, yt, label=\"ground acceleration\")\nplt3 = plot(tt, et, label=\"envelope of acceleration\")\nplt = plot(plt1, plt2, plt3, layout = (3, 1))","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"noise_earthquake.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Now we are ready to check the order of convergence. We set the target resolution, the convergence test resolutions, the sample convergence resolutions, and the number of sample trajectories for the Monte-Carlo approximation of the strong error.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"ntgt = 2^18\nns = 2 .^ (6:9)\nm = 100 # 1_000\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We add some information about the simulation:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"info = (\n    equation = \"mechanical structure model under ground-shaking random excitations\",\n    noise = \"transport process noise\",\n    ic = \"\\$X_0 = \\\\mathbf{0}\\$\"\n)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We define the target solution as the Euler approximation, which is to be computed with the target number ntgt of mesh points, and which is also the one we want to estimate the rate of convergence, in the coarser meshes defined by ns.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"target = RandomEuler(length(x0law))\nmethod = RandomEuler(length(x0law))","category":"page"},{"location":"examples/08-earthquake/#Order-of-convergence","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Order of convergence","text":"","category":"section"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"With all the parameters set up, we build the convergence suites for each noise:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"suite = ConvergenceSuite(t0, tf, x0law, f!, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"Then we are ready to compute the errors:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The computed strong error for each resolution in ns is stored in field errors, and raw LaTeX tables can be displayed for inclusion in the article:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"println(generate_error_table(result, info)) # hide\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"The calculated order of convergence is given by field p:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/#Plots","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Plots","text":"","category":"section"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We create plots with the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"plt = plot(result)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/\", \"convergence_earthquake.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"For the sake of illustration, we plot a sample of an approximation of a target solution, in each case:","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"nsample = ns[[1, 2, 3]]\nplot(suite, ns=nsample)","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"We also draw an animation of the motion of the single-storey building in each case. First the model with the transport-modulated noise.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"And now with the Hawkes-modulated noise.","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"dt = (tf - t0) / (ntgt - 1)\nmt = [mapreduce(ri -> gm(t, ri[1], ri[2], ri[3], ri[4]), +,  eachcol(noise.rv)) for t in range(t0, tf, length=ntgt)]\n\n@time anim = @animate for i in 1:div(ntgt, 2^9):div(ntgt, 1)\n    ceiling = mt[i] + suite.xt[i, 1]\n    height = 3.0\n    halfwidth = 2.0\n    aspectfactor = (4/6) * 4halfwidth / height\n    plot([mt[i] - halfwidth; ceiling - halfwidth; ceiling + halfwidth; mt[i] + halfwidth], [0.0; height; height; 0.0], xlim = (-2halfwidth, 2halfwidth), ylim=(0.0, aspectfactor * height), xlabel=\"\\$\\\\mathrm{displacement}\\$\", ylabel=\"\\$\\\\textrm{height}\\$\", fill=true, title=\"Building at time t = $(round((i * dt), digits=3))\", legend=false)\nend\nnothing # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"gif(anim, fps = 30) # hide","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"","category":"page"},{"location":"examples/08-earthquake/","page":"Mechanical structural under random Earthquake-like seismic disturbances","title":"Mechanical structural under random Earthquake-like seismic disturbances","text":"This page was generated using Literate.jl.","category":"page"},{"location":"noises/homlin/#Homogeneous-linear-Itô-process-noise","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"A classical type of noise is the geometric Brownian motion (gBm) process Y_t_t satisfying","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdY_t = mu Y_t mathrmdt + sigma Y_t mathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"where mu is a drift parameter and sigma is a diffusion parameter, both assumed constant. It appears naturally when the specific growth parameter mu in the classical growth model","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"fracmathrmdxmathrmdt = mu x","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"is substituted by a randomly varying parameter given as a stochastic process M_t with a base growth rate mu \"perturbed\" by a white noise, i.e.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"M_t = mu + sigmafracmathrmdW_tmathrmdt","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"for some disturbance amplitude sigma  0 This means rigorously that","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdM_t = mumathrmdt + sigmamathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Thus, the natural-growth ordinary differential equation becomes the stochastic differential equation known as the geometric Brownian motion Y_t_t.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"More generally, the basal coefficient mu and the diffusion coefficient sigma in the equation for M_t may also vary deterministically for seasonal reasons, on top of the random disturbances, so it is natural to consider the non-autonomous version","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdM_t = a(t)mathrmdt + b(t)mathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"In this case, the gBm equation is substituted by a more general homogeneous linear equation with time-dependent coefficients,","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdY_t = a(t) Y_t mathrmdt + b(t) Y_t mathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"This equation has the explicit solution","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Y_t = y_0 e^int_0^t (a(s) - fracb(s)^22) mathrmds + int_0^t b(s) mathrmdW_s","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"This can also be written in a recursive way via the expression","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Y_t+tau = Y_t e^int_t^t+tau (a(s) - fracb(s)^22) mathrmds + int_t^tau b(s) mathrmdW_s","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"When primitives of a=a(t) and b^2=b(t)^2 are given, a distributionally exact discretization Y_t_j_j can be computed on the mesh points (t_j)_j in a recursive manner by","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Y_t_j = Y_t_j-1 e^(p_a(t_j) - p_a(t_j-1)) - (p_b^2(t_j) - p_b^2(t_j-1)2 + Z_j) qquad j = 1 ldots","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"with Y_0 = y_0, and where p_a = p_a(t) is the given primitive of a=a(t) p_b^2 = p_b^2(t) is the given primitive of b^2 = b(t)^2 and Z_j_j is a random vector with independent, normally distributed random variables","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Z_j sim mathcalN(0 p_b^2(t_j) - p_b^2(t_j-1))","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"The basic statistics (mean and variance) for this process can be computed by first computing the statistics for its logarithm, ","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"ln Y_t = ln y_0 + int_0^t (a(s) - fracb(s)^22) mathrmds + int_0^t b(s) mathrmdW_s","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"which is a Gaussian process satisfying","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathbbEleft ln Y_t right = ln y_0 + int_0^t (a(s) - fracb(s)^22) mathrmds","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"and","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmVarleft( ln Y_t right) = int_0^t b(s)^2 mathrmds","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Since each ln Y_t is Gaussian, Y_t is log-normal with","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathbbEleft Y_t right = y_0 e^int_0^t a(s) mathrmds","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"and","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmVarleft( Y_t right) = y_0^2 e^int_0^t 2a(s) mathrmdsleft( e^int_0^t b(s)^2 mathrmds - 1 right)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We simulate, below, some examples of homogeneous linear processes for illustration purposes and for exhibiting the correctness of the implementation.","category":"page"},{"location":"noises/homlin/#Loading-the-packages","page":"Homogeneous linear Itô process noise","title":"Loading the packages","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We start by loading the necessary packages:","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"using Random\nusing Statistics\nusing Plots\nusing Test\nusing RODEConvergence","category":"page"},{"location":"noises/homlin/#Setup","page":"Homogeneous linear Itô process noise","title":"Setup","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We start by setting the time interval, the mesh parameters, and the number of sample paths, common to all simulations,","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"t0 = 0.0\ntf = 2.0\nn = 2^10\ntt = range(t0, tf, length=n)\ndt = (tf - t0) / (n - 1)\nm = 200\nnothing # hide","category":"page"},{"location":"noises/homlin/#Geometric-Brownian-Motion","page":"Homogeneous linear Itô process noise","title":"Geometric Brownian Motion","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"For the gBm process, we have a(t) = mu and b(t) = sigma constant. This can be implemented with the gBm constructor","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"y0 = 0.4\nμ = 0.3\nσ = 0.2\nnoise_gbm = GeometricBrownianMotionProcess(t0, tf, y0, μ, σ)\nnothing # hide","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"or via the homogeneous linear Itô process constructor, by given the primitive of the constants mu and sigma^2, which in this case are just linear functions:","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"primitive_a = t -> μ * t\nprimitive_b2 = t -> σ^2 * t\nnoise = HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_b2)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"For comparison, we generate a bunch of sample paths with both constructors and check their statistics.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"rng = Xoshiro(123)\n\ngBmt = Matrix{Float64}(undef, n, m)\nYt = Matrix{Float64}(undef, n, m)\n\nfor j in 1:m\n    rand!(rng, noise, view(gBmt, :, j))\n    rand!(rng, noise, view(Yt, :, j))\nend","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We check their expectation and variance against the theoretical values.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"@testset \"Statistics of gBm and linear\" begin\n    @test mean(view(Yt, lastindex(Yt, 1), :)) ≈ y0 * exp(μ * tf) (atol = 0.1)\n    @test mean(view(gBmt, lastindex(Yt, 1), :)) ≈ y0 * exp(μ * tf) (atol = 0.1)\n    @test var(view(Yt, lastindex(Yt, 1), :)) ≈ y0^2 * exp( 2μ * tf ) * ( exp( ( σ^2 ) * tf ) - 1 ) (atol = 0.1)\n    @test var(view(gBmt, lastindex(Yt, 1), :)) ≈ y0^2 * exp( 2μ * tf ) * ( exp( ( σ^2 ) * tf ) - 1 ) (atol = 0.1)\nend\nnothing # hide","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We plot the ensemble of paths just for the sake of illustration, along with the mean and 95% confidence region.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"plt = plot(title=\"Sample paths for the gBm process\", titlefont=10)\nplot!(plt, tt, t -> y0 * exp( (μ - 2σ) * t ), fillrange = t -> y0 * exp( (μ + 2σ) * t ), alpha=0.5, color=2, label=\"95% region\")\nplot!(plt, tt, t -> y0 * exp( μ * t), label=\"expectation\", color = 2)\nplot!(plt, tt, Yt, xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\", guidefont=10, label=nothing, color=1, alpha=0.2)","category":"page"},{"location":"noises/homlin/#Exponential-decay-with-oscilatory-random-perturbation","page":"Homogeneous linear Itô process noise","title":"Exponential decay with oscilatory random perturbation","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Now we consider the homogeneous linear Itô process noise defined by a decaying drift factor and an oscillatory diffusion,","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdY_t = -2t Y_t mathrmdt + sin(3pi t) Y_t mathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"With the following primitives of a(t) = -2t and b(t)^2 = sin(3pi t)^2","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"p_a(t) = -t^2 qquad p_b^2(t) = frac12left(t - frac13pisin(3pi t)cos(3pi t)right)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"we define the process as","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"primitive_a = t -> -t^2\nprimitive_b2 = t -> t/2 - sin(3π * t) * cos(3π * t) / 6π \nnoise = HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_b2)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Now we simulate a number of sample paths:","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"rng = Xoshiro(123)\n\nfor j in 1:m\n    rand!(rng, noise, view(Yt, :, j))\nend","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We check their expectation and their variance against the theoretical values in this case, as well.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"@testset \"Statistics\" begin\n    @test mean(view(Yt, lastindex(Yt, 1), :)) ≈ y0 * exp(primitive_a(tf)) (atol = 0.1)\n    @test var(view(Yt, lastindex(Yt, 1), :)) ≈ y0^2 * exp( 2 * primitive_a(tf) ) * ( exp( primitive_b2(tf) ) - 1 ) (atol = 0.1)\nend\nnothing # hide","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"For the sake of illustration, we plot the computed sample paths, along with the expectation and 95% confidence region.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"plt = plot(title = \"Sample paths for the homogeneous linear RODE with exponential decay\", titlefont=10)\nplot!(plt, tt, t -> y0 * exp(primitive_a(t) - 2sqrt(primitive_b2(t))), fillrange = t -> y0 * exp(primitive_a(t) + 2sqrt(primitive_b2(t))), alpha=0.5, color=2, label=\"95% region\")\nplot!(plt, tt, t -> y0 * exp(primitive_a(t)), label=\"expectation\", color = 2)\nplot!(plt, tt, Yt, xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\", guidefont=10, label=nothing, color=1, alpha=0.2)","category":"page"},{"location":"noises/homlin/#Exponential-growth-with-oscilatory-random-perturbation","page":"Homogeneous linear Itô process noise","title":"Exponential growth with oscilatory random perturbation","text":"","category":"section"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Now we consider the homogeneous linear Itô process noise defined by a decaying drift factor and an oscillatory diffusion factor,","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"mathrmdY_t = 02t Y_t mathrmdt + 01sin(3pi t) Y_t mathrmdW_t","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We consider the following primitives of a(t) = t5 and b(t)^2 = sin(3pi t)^210","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"p_a(t) = fract^210 qquad p_b^2(t) = frac120left(t - frac13pisin(3pi t)cos(3pi t)right)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"Hence, we define the process as","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"y0 = 0.1\nprimitive_a = t -> t^2/10\nprimitive_b2 = t -> t/20 - sin(3π * t) * cos(3π * t) / 60π \nnoise = HomogeneousLinearItoProcess(t0, tf, y0, primitive_a, primitive_b2)","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"rng = Xoshiro(123)\nnothing # hide","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"for j in 1:m\n    rand!(rng, noise, view(Yt, :, j))\nend","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"We check their expectation and their variance against the theoretical values.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"@testset \"Statistics\" begin\n    @test mean(view(Yt, lastindex(Yt, 1), :)) ≈ y0 * exp(primitive_a(tf)) (atol = 0.1)\n    @test var(view(Yt, lastindex(Yt, 1), :)) ≈ y0^2 * exp( 2 * primitive_a(tf) ) * ( exp( primitive_b2(tf) ) - 1 ) (atol = 0.1)\nend\nnothing # hide","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"For the sake of illustration, we plot the computed sample paths, along with the expectation and 95% confidence region.","category":"page"},{"location":"noises/homlin/","page":"Homogeneous linear Itô process noise","title":"Homogeneous linear Itô process noise","text":"plt = plot(title = \"Sample paths for the homogeneous linear RODE with exponential growth\", titlefont=10)\nplot!(plt, tt, t -> y0 * exp(primitive_a(t) - 2sqrt(primitive_b2(t))), fillrange = t -> y0 * exp(primitive_a(t) + 2sqrt(primitive_b2(t))), alpha=0.5, color=2, label=\"95% region\")\nplot!(plt, tt, t -> y0 * exp(primitive_a(t)), label=\"expectation\", color = 2)\nplot!(plt, tt, Yt, xlabel=\"\\$t\\$\", ylabel=\"\\$y\\$\", guidefont=10, label=nothing, color=1, alpha=0.2)","category":"page"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"These are the companion notes for the paper \"Improved error estimate for the order of strong convergence of the Euler method for random ordinary differential equations\", by Peter E. Kloeden and Ricardo M. S. Rosa.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"We briefly review the main results of the paper and reveal the numerical codes used for the examples presented in the paper.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The codes are written in the Julia programming language. The examples are based on the local package RODEConvergence.jl, residing on the folder src/ of the github repository. It contains the implementation of the Euler method for scalar equations and systems of equations and all the helper functions needed to defined the noises, setup the problem, check the convergence of the method, and plot the desired figures. This is not a registered package in Julia, as it is only used here as a companion code. The methods defined in this local package can be seen in API.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"It is illustrative to see the first example Homogenous linear RODE with a Wiener process noise coefficient, in which all the steps are explained in more details.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"We use a few standard libraries (Random, LinearAlgebra, Statistics, Test) and a few packages (JuliaStats/Distributions.jl, JuliaMath/FFTW.jl, JuliaPlots/Plots.jl).","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"This documentation makes use of Documenter.jl and Literate.jl, with the help of LiveServer.jl and Revise.jl, during development.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Some extra material uses JuliaCI/BenchmarkToolsjl.","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"EditURL = \"https://github.com/rmsrosa/rode_conv_em/docs/literate/examples/01-wiener_linearhomogeneous.jl\"","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#Homogenous-linear-RODE-with-a-Wiener-process-noise-coefficient","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Draft = false","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We start by considering a homogeneous linear equation in which the coefficient is a Wiener process. In this case, it is already know, by other means, that the Euler method converges strongly of order 1, because it can be regarded as system of stochastic differential equations with additive noise. Nevertheless, we use it here for illustrative purposes.","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#The-equation","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"The equation","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We consider the RODE","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"  begincases\n    displaystyle fracmathrmdX_tmathrmd t = W_t X_t qquad 0 leq t leq T \n  left X_t right_t = 0 = X_0\n  endcases","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"where W_t_tgeq 0 is a standard Wiener process. The explicit solution is","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"  X_t = e^int_0^t W_s mathrmds X_0","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#Computing-a-solution-with-the-exact-distribution","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Computing a solution with the exact distribution","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The integral int_0^t_j W_smathrmds and, hence, the exact solution, is not uniquely defined from the values W_t_j of the noise on the mesh points, no matter how fine it is. Hence, it makes no sense to compute the strong distance to \"the exact solution\". But we can estimate that by drawing sample solutions with the exact distribution conditioned on the mesh values.","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We do that by first breaking down the sum into parts:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"int_0^t_j W_smathrmds = sum_i = 0^j-1 int_t_i^t_i+1 W_smathrmds","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"On each mesh interval, we use that","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"  B_t = W_t - W_t_i - fract - t_it_i+1-t_i(W_t_i+1 - W_t_i)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"is a Brownian bridge on t_i t_i+1, independent of W_t_i and W_t_i+1.","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Since","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"  mathrmdW_t = mathrmdB_t + fracW_t_i+1-W_t_it_i+1-t_imathrmdt","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"we obtain","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"beginalign*\n  int_t_i^t_i+1 W_smathrmds  = int_t_i^t_i+1 B_s^imathrmds + int_t_i^t_i+1 left( W_t_i + fracs - t_it_i+1-t_i(W_t_i+1 - W_t_i)right)mathrmds \n     = frac12left(W_t_i + W_t_i+1right)(t_i+1 - t_i) + Z_i\nendalign*","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"where","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"    Z_i = int_t_i^t_i+1 B_s^imathrmds","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Notice the first term is the trapezoidal rule while the second term is a Gaussian with zero mean. We need to compute the variance of Z_i to completely characterize it. By translation, it suffices to consider a Brownian bridge B_t_tin 0 tau on an interval 0 tau, with tau = Delta t_N. This is obtained from B_t = W_t - (ttau)W_tau. We have, since mathbbEW_tW_s = mint s, that","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"   mathbbEB_tB_s = mint s - fractstau","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Hence,","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"beginalign*\n    mathbbEleftleft(int_0^tau B_smathrmdsright)^2right  = mathbbEleftint_0^tau int_0^tau B_sB_tmathrmdsmathrmdright \n     = int_0^tau int_0^tau mathbbEB_sB_t mathrmdsmathrmdt \n     = int_0^tau int_0^tau left(mint s - fractstauright) mathrmdsmathrmdt  \n     = int_0^tau int_0^t smathrmdsmathrmdt + int_0^tau int_t^tau tmathrmdsmathrmdt - int_0^tau int_0^tau fractstau mathrmdsmathrmdt \n     = int_0^tau fract^22mathrmdt + int_0^tau t(tau - t)mathrmdt - int_0^tau fracttau^22taumathrmdt \n     = fractau^312\nendalign*","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Back to Z_i, this means that","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"    Z_i sim mathcalNleft(0 frac(t_i+1- t_i)^312right) = sqrtfrac(t_i+1 - t_i)^312mathcalN(0 1)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"For a normal variable N sim mathcalN(mu sigma), the expectation of the random variable e^N is mathbbEe^N = e^mu + sigma^22. Hence,","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"    mathbbEe^Z_i = e^((t_i+1- t_i)^3)24","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"This is the contribution of this random variable to the mean of the exact solution. But in the implementation we actually draw from Z_i, not from e^Z_i.","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Another way is to use the result in Section 14.2 of Han & Kloeden 2017, which says that the the exact distribution of int_0^tau W_smathrmds given the step Delta W = W_tau - W_0 = W_tau, is","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"int_0^tau W_smathrmds sim fractau2Delta W + sqrtfractau^312mathcalN(0 1) = fractau2Delta W + mathcalNleft(0 fractau^312right)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Then, for the distribution of the integral over a mesh interval t_i t_i+1 when given the endpoints W_t_i and W_t_i+1 we use that s mapsto W_t_i+s - W_t_i is a standard Wiener process to find that","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"beginalign*\nint_t_i^t_i+1 W_smathrmds  = W_t_i + int_t_i^t_i+1 (W_s - W_t_i)mathrmds \n = W_t_i(t_i+1 - t_i) + int_0^t_i+1 - t_i (W_t_i+s - W_t_i)mathrmds \n = W_t_i(t_i+1 - t_i) + frac(t_i+1 - t_i)2(W_t_i+1-W_t_i) + Z_i \n = frac(W_t_i+1+W_t_i)2(t_i+1 - t_i) + Z_i\nendalign*","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"where Z_i is as above. Thus, breaking down the sum over the mesh intervals:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"int_0^t_j W_smathrmds = sum_i = 0^j-1 int_t_i^t_i+1 W_smathrmds = sum_i=0^j-1 left( frac(W_t_i+1+W_t_i)2(t_i+1 - t_i) + Z_iright)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"In any case, once an Euler approximation is computed, along with realizations W_t_i_i=0^n of a sample path of the noise, we consider an exact sample solution given by","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"    X_t_j = X_0 e^sum_i = 0^j-1left(frac12left(W_t_i + W_t_i+1right)(t_i+1 - t_i) + Z_iright)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"for realizations Z_i drawn from a normal distribution and scaled by the standard deviation sqrt(t_i+1 - t_i)^312. This is implemented by computing the integral recursively, via","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"    begincases\n        I_j = I_j-1 + frac12left(W_t_j-1 + W_t_jright)(t_j - t_j-1) + Z_j \n        Z_j = sqrtfrac(t_j - t_j-1)^312 R_j \n        R_j sim mathcalN(0 1) \n    endcases","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"with I_0 = 0, and setting","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"  X_t_j = X_0 e^I_j","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#Numerical-approximation","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Numerical approximation","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/#Setting-up-the-problem","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Setting up the problem","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"First we load the necessary packages","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"using Plots\nusing Random\nusing Distributions\nusing RODEConvergence","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Then we set up some variables, starting by choosing the Xoshiro256++ pseudo-random number generator, and setting its seed for the sake of reproducibility:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"rng = Xoshiro(123)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We set the right hand side of the equation:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"f(t, x, y) = y * x","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Next we set up the time interval and the initial distribution law for the initial value problem, which we take it to be a Distributions.Normal random variable:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"t0, tf = 0.0, 1.0\nx0law = Normal()","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The noise is a WienerProcess starting at y_0 = 0:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"y0 = 0.0\nnoise = WienerProcess(t0, tf, y0)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The number of mesh points for the target solution, the approximations, and for a visualization of the one sample approximation:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"ntgt = 2^16\nns = 2 .^ (4:14)\nnsample = ns[[1, 2, 3, 4]]\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Finally, we set up the number of samples for the Monte Carlo estimate of the strong error:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"m = 500","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"and add some information about the simulation:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"info = (\n    equation = \"\\$\\\\mathrm{d}X_t/\\\\mathrm{d}t = W_t X_t\\$\",\n    noise = \"a standard Wiener process noise \\$\\\\{W_t\\\\}_t\\$\",\n    ic = \"\\$X_0 \\\\sim \\\\mathcal{N}(0, 1)\\$\"\n)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The target solution as described above is implemented as","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"function target_solver!(xt::Vector{T}, t0::T, tf::T, x0::T, f::F, yt::Vector{T}, rng::AbstractRNG) where {T, F}\n    axes(xt) == axes(yt) || throw(\n        DimensionMismatch(\"The vectors `xt` and `yt` must match indices\")\n    )\n\n    n = size(xt, 1)\n    dt = (tf - t0) / (n - 1)\n    i1 = firstindex(xt)\n    xt[i1] = x0\n    integral = zero(T)\n    zscale = sqrt(dt^3 / 12)\n    for i in Iterators.drop(eachindex(xt, yt), 1)\n        integral += (yt[i] + yt[i1]) * dt / 2 + zscale * randn(rng)\n        xt[i] = x0 * exp(integral)\n        i1 = i\n    end\nend","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"and with that we construct the CustomMethod that solves the problem with this target_solver!:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"target = CustomUnivariateMethod(target_solver!, rng)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The method for which we want to estimate the rate of convergence is, naturally, the Euler method, denoted RandomEuler:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"method = RandomEuler()","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#Order-of-convergence","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Order of convergence","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"With all the parameters set up, we build the ConvergenceSuite:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"suite = ConvergenceSuite(t0, tf, x0law, f, noise, target, method, ntgt, ns, m)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"Then we are ready to compute the errors via solve:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"@time result = solve(rng, suite)\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The computed strong error for each resolution in ns is stored in result.errors, and a raw LaTeX table can be displayed for inclusion in the article:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"table = generate_error_table(result, info)\n\nprintln(table) # hide\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"The calculated order of convergence is given by result.p:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"println(\"Order of convergence `C Δtᵖ` with p = $(round(result.p, sigdigits=2)) and 95% confidence interval ($(round(result.pmin, sigdigits=3)), $(round(result.pmax, sigdigits=3)))\")\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/#Plots","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Plots","text":"","category":"section"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We create a plot with the rate of convergence with the help of a plot recipe for ConvergenceResult:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"plt = plot(result)","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"savefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/order_wiener_linearhomogenous.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"For the sake of illustration, we plot the approximations of a sample target solution:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"plt = plot(suite, ns=nsample)\n\nsavefig(plt, joinpath(@__DIR__() * \"../../../../latex/img/approximation_linearhomogenous.png\")) # hide\nnothing # hide","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"We can also visualize the noise associated with this sample solution:","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"plot(suite, xshow=false, yshow=true, label=\"Wiener noise\")","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"","category":"page"},{"location":"examples/01-wiener_linearhomogeneous/","page":"Homogenous linear RODE with a Wiener process noise coefficient","title":"Homogenous linear RODE with a Wiener process noise coefficient","text":"This page was generated using Literate.jl.","category":"page"}]
}
